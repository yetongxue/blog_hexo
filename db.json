{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/photos/20180615095642.png","path":"photos/20180615095642.png","modified":1,"renderable":0},{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/index.md","hash":"fb86bea9b3fe01ef42b0d13ae60f408eee00d09e","modified":1528955217783},{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1528952648075},{"_id":"themes/BlueLake/README.en.md","hash":"6cc6e346635bf26dd71030b9c3c6443507cd4108","modified":1528952648076},{"_id":"themes/BlueLake/package.json","hash":"c2a16fbde3fb46835304610052e3cc0afa3610d5","modified":1528953010321},{"_id":"themes/BlueLake/db.json","hash":"dfe8380263ace8fb180b4eb527e82db3e5a11978","modified":1528953012743},{"_id":"themes/BlueLake/README.md","hash":"66c3ef7a779b6d65bad90daa2e03bcb7a1bb742f","modified":1528952648076},{"_id":"themes/BlueLake/_config.yml","hash":"91b7dd73bd98cae804381419c5944df16dfc762b","modified":1529027863618},{"_id":"source/photos/20180615095642.png","hash":"ff6910635fea66a9e99c85c89b83c88dce5a0334","modified":1529027827466},{"_id":"source/code/index.md","hash":"df078625cff87a0ca504154b63ee2388631328a5","modified":1529026119849},{"_id":"source/resume/index.md","hash":"34f1fca4fd72b496841c7a4c2c26a92db08dc4c5","modified":1529026119849},{"_id":"source/about/index.md","hash":"08228a944481bf8b5d03e6706abaa32f606b0783","modified":1528955284671},{"_id":"source/_posts/yetongxue.md","hash":"1909d061a32f243f442832ece7e2603339b4ad96","modified":1528947727105},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1528952648091},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1528952648094},{"_id":"source/_posts/hello-world.md","hash":"8f345aa135890c795a8ad35b65933c09d5450a15","modified":1528954514094},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1528952648092},{"_id":"themes/BlueLake/source/css/style.styl","hash":"45776bc176bc8ed0d664e953e23d6a0a9a030929","modified":1528952648092},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1528952648098},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"9e68d688f2f12ec193ce9496beb0fd42e1de2288","modified":1528952648098},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1528952648094},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1528952648095},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1528952648095},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1528952648095},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"a127deb32d1df69bbe50a3824a5f90472513c9c3","modified":1528952648077},{"_id":"themes/BlueLake/languages/en.yml","hash":"95bac2c366505d016b5defc47370679b9f5f3c4b","modified":1528952648078},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"baa68725feeec6643f875a532a9d55ba8aacdb2c","modified":1528952648079},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"bd97d5e4b39d30da1644b90256dfc4e6b1d76988","modified":1528952648079},{"_id":"themes/BlueLake/languages/tr.yml","hash":"5f13d55fdd5bdd1115075736e3e26a1ea1dd1dea","modified":1528952648080},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"d7f5842295509746f878e627c4c7e298f3f1613a","modified":1528952648080},{"_id":"themes/BlueLake/languages/ko.yml","hash":"fc8826724f570136d9a2d3ec2705b7b7000e0f14","modified":1528952648079},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1528952648097},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"d4d587ba81864910715c0c3879605cc6a9362e09","modified":1528952648080},{"_id":"themes/BlueLake/source/js/totop.js","hash":"d9367c6fa3e973bc5f32ce38d951858455726a02","modified":1528952648098},{"_id":"themes/BlueLake/layout/archive.jade","hash":"98d9fb812edbc180878fdadb65bc38499eef2cc4","modified":1528952648088},{"_id":"themes/BlueLake/layout/post.jade","hash":"0305258c33e4d02f977ee1aaf7f2429b993fda17","modified":1528952648090},{"_id":"themes/BlueLake/layout/tag.jade","hash":"50c7af7565751db5d7672beb434768885fb224cb","modified":1528952648090},{"_id":"themes/BlueLake/layout/category.jade","hash":"9f3a9f1d6f0bbad258b308ad8d49128c05b422cf","modified":1528952648089},{"_id":"themes/BlueLake/layout/index.jade","hash":"dd81d9f7a6b388de2ab731b17b3ba55f70df4a5f","modified":1528952648090},{"_id":"themes/BlueLake/layout/page.jade","hash":"415404398931d98db28bff723886b07dcb8bbbc3","modified":1528952648090},{"_id":"themes/BlueLake/layout/base.jade","hash":"bc093b5a0aee3427092f58f222f607c7dc23305f","modified":1528957405168},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"3f11d2b5a4c647bf2b37c4d00bdc250cda80b770","modified":1528952648081},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"c1f1955d12aee22a931a3f4ad9d0e9a408e80f3c","modified":1528952648082},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"21d05990aa5a19632f9ed51085ef7727adeea17a","modified":1528952648081},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"d970c81b5cdbd7c0348ee28e93bcbb006d613b6d","modified":1528952648083},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1528952648084},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1528952648083},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1528952648083},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1528952648084},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"e0aa5d7adc1218a324a484abe3513e9545f89067","modified":1528952648083},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1528952648085},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1528952648085},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"0107affa0c6b22e09546fcf82a6f71ba2dd1e315","modified":1528952648086},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1528952648084},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"6e587b7d254d0d92b959ba58262f5e81b618eba2","modified":1528952648086},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"9af40206a525db1cb9761fa6facb36332057acf3","modified":1528952648087},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"164a83faaf92ec19d268fd303bf6e30348ddef5c","modified":1528952648088},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1528952648088},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1528952648088},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1528952648088},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"4f2fba7fcb39a6bf70ff04dad9a3dab2563b21e7","modified":1528952648084},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"ba0839518db2cb9dafee67ca5e471219bfba2e90","modified":1528952648084}],"Category":[],"Data":[],"Page":[{"_content":"ayout：page。 Create folders inlcudingindex.mdinsourcefolder to add pages, and add alayout: pageinfront-matterofindex.md`.","source":"index.md","raw":"ayout：page。 Create folders inlcudingindex.mdinsourcefolder to add pages, and add alayout: pageinfront-matterofindex.md`.","date":"2018-06-14T05:46:57.783Z","updated":"2018-06-14T05:46:57.783Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"cjifdooa900006khlme2wzwuo","content":"<p>ayout：page。 Create folders inlcudingindex.mdinsourcefolder to add pages, and add alayout: pageinfront-matterofindex.md`.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ayout：page。 Create folders inlcudingindex.mdinsourcefolder to add pages, and add alayout: pageinfront-matterofindex.md`.</p>\n"},{"_content":"\n\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.util.CollectionUtils;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n* 基于jackson的json和object相互转换的工具类\n* @author \n* @date 2017年6月21日 上午10:00:23\n*/\npublic final class JsonUtil {\n    /** 私有构造 单例 */\n    private JsonUtil(){\n        \n    }\n    \n    private static ObjectMapper objectMapper = null;\n    \n    static\n    {\n        // 将objectMapper 设置为全局静态缓存，提高调用效率\n        objectMapper = new ObjectMapper();\n        objectMapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n    \n    /** 供外部调用 ObjectMapper */\n    public static ObjectMapper getObjectMapper()\n    {\n        return objectMapper;\n    }\n    \n    /**\n     * json串转对象\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return\n     */\n    public static <T> T json2obj(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        T t = null;\n\n        try\n        {\n            t = objectMapper.readValue(jsonStr, clazz);\n        }\n        catch (IOException e)\n        {\n\n        }\n        return t;\n    }\n    \n    /**\n     * json串转map对象,前提是被转换的json串value为多组k-v\n     * {\"zhangjiajie\":{\"price\":\"fixed\",\"type\":\"mountain\"},\"jiuzhaigou\":{\"price\":\"fixed\",\"type\":\"mountain\"}}\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return Map\n     */\n    public static <T> Map<String, T> json2map(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        Map<String, Map<String, Object>> map = null;\n        try\n        {\n            map = objectMapper.readValue(jsonStr,\n                    new TypeReference<Map<String, T>>()\n                    {\n                    });\n        }\n        catch (IOException e)\n        {\n\n        }\n\n        if (CollectionUtils.isEmpty(map))\n        {\n            return null;\n        }\n\n        Map<String, T> result = new HashMap<String, T>();\n        for (Entry<String, Map<String, Object>> entry : map.entrySet())\n        {\n            result.put(entry.getKey(), map2pojo(entry.getValue(), clazz));\n        }\n        return result;\n    }\n    \n    /**\n     * json转list对象\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return List\n     */\n    public static <T> List<T> json2list(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        List<Map<String, Object>> list = null;\n        try\n        {\n            list = objectMapper.readValue(jsonStr,\n                    new TypeReference<List<T>>()\n                    {\n                    });\n        }\n        catch (IOException e)\n        {\n        }\n\n        // 非空校验\n        if (CollectionUtils.isEmpty(list))\n        {\n            return null;\n        }\n\n        List<T> result = new ArrayList<T>();\n        for (Map<String, Object> map : list)\n        {\n            result.add(map2pojo(map, clazz));\n        }\n        return result;\n    }\n    \n    /**\n     * 获取json串的某个键对应的值\n     * @Description\n     * @param jsonSrc\n     * @param jsonKey\n     * @return\n     */\n    public static String getJsonValue(String jsonSrc, String jsonKey)\n    {\n        if (StringUtils.isEmpty(jsonSrc) || StringUtils.isEmpty(jsonKey))\n        {\n            return null;\n        }\n        JsonNode node = json2obj(jsonSrc, JsonNode.class);\n        \n        if(node == null)\n        {\n            return null;\n        }\n\n        // 获取jsonKey数据\n        JsonNode dataNode = node.get(jsonKey);\n\n        if (null == dataNode)\n        {\n            return null;\n        }\n\n        return dataNode.toString();\n    }\n    \n    /**\n     * 对象转json串,维持基本类型,空值返回null\n\n     * 示例\n\n     * {\"name\":\"alex\",\"age\":20,\"address\":null,\"score\":[{\"subject\":\"math\",\"score\":98},{\"subject\":\"art\",\"score\":50}]}\n     * @Description\n     * @param obj\n     * @return\n     */\n    public static String obj2json(Object obj)\n    {\n        if (obj == null)\n        {\n            return null;\n        }\n        String jsonResult = null;\n        try\n        {\n            jsonResult = objectMapper.writeValueAsString(obj);\n        }\n        catch (JsonProcessingException e)\n        {\n    \n        }\n    \n        return jsonResult;\n    }\n\n    /**\n     * 一般对象转JsonNode\n     * @Description\n     * @param obj\n     * @return\n     */\n    public static JsonNode obj2node(Object obj)\n    {\n        if (null == obj)\n        {\n            return null;\n        }\n\n        JsonNode node = null;\n\n        try\n        {\n            node = objectMapper.readTree(obj2json(obj));\n        }\n        catch (IOException e)\n        {\n        }\n\n        return node;\n    }\n    \n    public static <T> T obj2T(Object obj, Class<T> clazz)\n    {\n        if (null == obj)\n        {\n            return null;\n        }\n\n        T t = null;\n\n        try\n        {\n            t = objectMapper.readValue(obj2json(obj), clazz);\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n\n        return t;\n    }\n    \n    /**\n     * map convert to javaBean\n     */\n    private static <T> T map2pojo(@SuppressWarnings(\"rawtypes\")Map map, Class<T> clazz)\n    {\n        return objectMapper.convertValue(map, clazz);\n    }\n    \n}\n\n","source":"code/index.md","raw":"\n\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.util.CollectionUtils;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n* 基于jackson的json和object相互转换的工具类\n* @author \n* @date 2017年6月21日 上午10:00:23\n*/\npublic final class JsonUtil {\n    /** 私有构造 单例 */\n    private JsonUtil(){\n        \n    }\n    \n    private static ObjectMapper objectMapper = null;\n    \n    static\n    {\n        // 将objectMapper 设置为全局静态缓存，提高调用效率\n        objectMapper = new ObjectMapper();\n        objectMapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n    \n    /** 供外部调用 ObjectMapper */\n    public static ObjectMapper getObjectMapper()\n    {\n        return objectMapper;\n    }\n    \n    /**\n     * json串转对象\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return\n     */\n    public static <T> T json2obj(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        T t = null;\n\n        try\n        {\n            t = objectMapper.readValue(jsonStr, clazz);\n        }\n        catch (IOException e)\n        {\n\n        }\n        return t;\n    }\n    \n    /**\n     * json串转map对象,前提是被转换的json串value为多组k-v\n     * {\"zhangjiajie\":{\"price\":\"fixed\",\"type\":\"mountain\"},\"jiuzhaigou\":{\"price\":\"fixed\",\"type\":\"mountain\"}}\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return Map\n     */\n    public static <T> Map<String, T> json2map(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        Map<String, Map<String, Object>> map = null;\n        try\n        {\n            map = objectMapper.readValue(jsonStr,\n                    new TypeReference<Map<String, T>>()\n                    {\n                    });\n        }\n        catch (IOException e)\n        {\n\n        }\n\n        if (CollectionUtils.isEmpty(map))\n        {\n            return null;\n        }\n\n        Map<String, T> result = new HashMap<String, T>();\n        for (Entry<String, Map<String, Object>> entry : map.entrySet())\n        {\n            result.put(entry.getKey(), map2pojo(entry.getValue(), clazz));\n        }\n        return result;\n    }\n    \n    /**\n     * json转list对象\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return List\n     */\n    public static <T> List<T> json2list(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        List<Map<String, Object>> list = null;\n        try\n        {\n            list = objectMapper.readValue(jsonStr,\n                    new TypeReference<List<T>>()\n                    {\n                    });\n        }\n        catch (IOException e)\n        {\n        }\n\n        // 非空校验\n        if (CollectionUtils.isEmpty(list))\n        {\n            return null;\n        }\n\n        List<T> result = new ArrayList<T>();\n        for (Map<String, Object> map : list)\n        {\n            result.add(map2pojo(map, clazz));\n        }\n        return result;\n    }\n    \n    /**\n     * 获取json串的某个键对应的值\n     * @Description\n     * @param jsonSrc\n     * @param jsonKey\n     * @return\n     */\n    public static String getJsonValue(String jsonSrc, String jsonKey)\n    {\n        if (StringUtils.isEmpty(jsonSrc) || StringUtils.isEmpty(jsonKey))\n        {\n            return null;\n        }\n        JsonNode node = json2obj(jsonSrc, JsonNode.class);\n        \n        if(node == null)\n        {\n            return null;\n        }\n\n        // 获取jsonKey数据\n        JsonNode dataNode = node.get(jsonKey);\n\n        if (null == dataNode)\n        {\n            return null;\n        }\n\n        return dataNode.toString();\n    }\n    \n    /**\n     * 对象转json串,维持基本类型,空值返回null\n\n     * 示例\n\n     * {\"name\":\"alex\",\"age\":20,\"address\":null,\"score\":[{\"subject\":\"math\",\"score\":98},{\"subject\":\"art\",\"score\":50}]}\n     * @Description\n     * @param obj\n     * @return\n     */\n    public static String obj2json(Object obj)\n    {\n        if (obj == null)\n        {\n            return null;\n        }\n        String jsonResult = null;\n        try\n        {\n            jsonResult = objectMapper.writeValueAsString(obj);\n        }\n        catch (JsonProcessingException e)\n        {\n    \n        }\n    \n        return jsonResult;\n    }\n\n    /**\n     * 一般对象转JsonNode\n     * @Description\n     * @param obj\n     * @return\n     */\n    public static JsonNode obj2node(Object obj)\n    {\n        if (null == obj)\n        {\n            return null;\n        }\n\n        JsonNode node = null;\n\n        try\n        {\n            node = objectMapper.readTree(obj2json(obj));\n        }\n        catch (IOException e)\n        {\n        }\n\n        return node;\n    }\n    \n    public static <T> T obj2T(Object obj, Class<T> clazz)\n    {\n        if (null == obj)\n        {\n            return null;\n        }\n\n        T t = null;\n\n        try\n        {\n            t = objectMapper.readValue(obj2json(obj), clazz);\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n\n        return t;\n    }\n    \n    /**\n     * map convert to javaBean\n     */\n    private static <T> T map2pojo(@SuppressWarnings(\"rawtypes\")Map map, Class<T> clazz)\n    {\n        return objectMapper.convertValue(map, clazz);\n    }\n    \n}\n\n","date":"2018-06-15T01:28:39.849Z","updated":"2018-06-15T01:28:39.849Z","path":"code/index.html","title":"","comments":1,"layout":"page","_id":"cjifdooej00016khlklplqrjb","content":"<p>import java.io.IOException;<br>import java.text.SimpleDateFormat;<br>import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br>import java.util.Map.Entry;</p>\n<p>import org.apache.commons.lang3.StringUtils;<br>import org.springframework.util.CollectionUtils;</p>\n<p>import com.fasterxml.jackson.core.JsonProcessingException;<br>import com.fasterxml.jackson.core.type.TypeReference;<br>import com.fasterxml.jackson.databind.JsonNode;<br>import com.fasterxml.jackson.databind.ObjectMapper;</p>\n<p>/**</p>\n<ul>\n<li>基于jackson的json和object相互转换的工具类</li>\n<li>@author </li>\n<li><p>@date 2017年6月21日 上午10:00:23<br><em>/<br>public final class JsonUtil {<br>  /** 私有构造 单例 </em>/<br>  private JsonUtil(){</p>\n<p>  }</p>\n<p>  private static ObjectMapper objectMapper = null;</p>\n<p>  static<br>  {</p>\n<pre><code>// 将objectMapper 设置为全局静态缓存，提高调用效率\nobjectMapper = new ObjectMapper();\nobjectMapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;));\n</code></pre><p>  }</p>\n<p>  /*<em> 供外部调用 ObjectMapper </em>/<br>  public static ObjectMapper getObjectMapper()<br>  {</p>\n<pre><code>return objectMapper;\n</code></pre><p>  }</p>\n<p>  /**</p>\n<ul>\n<li>json串转对象</li>\n<li>@Description</li>\n<li>@param jsonStr</li>\n<li>@param clazz</li>\n<li><p>@return<br>*/<br>public static <t> T json2obj(String jsonStr, Class<t> clazz)<br>{<br> if (StringUtils.isEmpty(jsonStr))<br> {</t></t></p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> T t = null;</p>\n<p> try<br> {</p>\n<pre><code>t = objectMapper.readValue(jsonStr, clazz);\n</code></pre><p> }<br> catch (IOException e)<br> {</p>\n<p> }<br> return t;<br>}</p>\n<p>/**</p>\n</li>\n<li>json串转map对象,前提是被转换的json串value为多组k-v</li>\n<li>{“zhangjiajie”:{“price”:”fixed”,”type”:”mountain”},”jiuzhaigou”:{“price”:”fixed”,”type”:”mountain”}}</li>\n<li>@Description</li>\n<li>@param jsonStr</li>\n<li>@param clazz</li>\n<li><p>@return Map<br>*/<br>public static <t> Map&lt;String, T&gt; json2map(String jsonStr, Class<t> clazz)<br>{<br> if (StringUtils.isEmpty(jsonStr))<br> {</t></t></p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> Map&lt;String, Map&lt;String, Object&gt;&gt; map = null;<br> try<br> {</p>\n<pre><code>map = objectMapper.readValue(jsonStr,\n        new TypeReference&lt;Map&lt;String, T&gt;&gt;()\n        {\n        });\n</code></pre><p> }<br> catch (IOException e)<br> {</p>\n<p> }</p>\n<p> if (CollectionUtils.isEmpty(map))<br> {</p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> Map&lt;String, T&gt; result = new HashMap&lt;String, T&gt;();<br> for (Entry&lt;String, Map&lt;String, Object&gt;&gt; entry : map.entrySet())<br> {</p>\n<pre><code>result.put(entry.getKey(), map2pojo(entry.getValue(), clazz));\n</code></pre><p> }<br> return result;<br>}</p>\n<p>/**</p>\n</li>\n<li>json转list对象</li>\n<li>@Description</li>\n<li>@param jsonStr</li>\n<li>@param clazz</li>\n<li><p>@return List<br>*/<br>public static <t> List<t> json2list(String jsonStr, Class<t> clazz)<br>{<br> if (StringUtils.isEmpty(jsonStr))<br> {</t></t></t></p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> List&lt;Map&lt;String, Object&gt;&gt; list = null;<br> try<br> {</p>\n<pre><code>list = objectMapper.readValue(jsonStr,\n        new TypeReference&lt;List&lt;T&gt;&gt;()\n        {\n        });\n</code></pre><p> }<br> catch (IOException e)<br> {<br> }</p>\n<p> // 非空校验<br> if (CollectionUtils.isEmpty(list))<br> {</p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> List<t> result = new ArrayList<t>();<br> for (Map&lt;String, Object&gt; map : list)<br> {</t></t></p>\n<pre><code>result.add(map2pojo(map, clazz));\n</code></pre><p> }<br> return result;<br>}</p>\n<p>/**</p>\n</li>\n<li>获取json串的某个键对应的值</li>\n<li>@Description</li>\n<li>@param jsonSrc</li>\n<li>@param jsonKey</li>\n<li><p>@return<br>*/<br>public static String getJsonValue(String jsonSrc, String jsonKey)<br>{<br> if (StringUtils.isEmpty(jsonSrc) || StringUtils.isEmpty(jsonKey))<br> {</p>\n<pre><code>return null;\n</code></pre><p> }<br> JsonNode node = json2obj(jsonSrc, JsonNode.class);</p>\n<p> if(node == null)<br> {</p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> // 获取jsonKey数据<br> JsonNode dataNode = node.get(jsonKey);</p>\n<p> if (null == dataNode)<br> {</p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> return dataNode.toString();<br>}</p>\n<p>/**</p>\n</li>\n<li><p>对象转json串,维持基本类型,空值返回null</p>\n</li>\n<li><p>示例</p>\n</li>\n<li><p>{“name”:”alex”,”age”:20,”address”:null,”score”:[{“subject”:”math”,”score”:98},{“subject”:”art”,”score”:50}]}</p>\n</li>\n<li>@Description</li>\n<li>@param obj</li>\n<li><p>@return<br>*/<br>public static String obj2json(Object obj)<br>{<br> if (obj == null)<br> {</p>\n<pre><code>return null;\n</code></pre><p> }<br> String jsonResult = null;<br> try<br> {</p>\n<pre><code>jsonResult = objectMapper.writeValueAsString(obj);\n</code></pre><p> }<br> catch (JsonProcessingException e)<br> {</p>\n<p> }</p>\n<p> return jsonResult;<br>}</p>\n<p>/**</p>\n</li>\n<li>一般对象转JsonNode</li>\n<li>@Description</li>\n<li>@param obj</li>\n<li><p>@return<br>*/<br>public static JsonNode obj2node(Object obj)<br>{<br> if (null == obj)<br> {</p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> JsonNode node = null;</p>\n<p> try<br> {</p>\n<pre><code>node = objectMapper.readTree(obj2json(obj));\n</code></pre><p> }<br> catch (IOException e)<br> {<br> }</p>\n<p> return node;<br>}</p>\n<p>public static <t> T obj2T(Object obj, Class<t> clazz)<br>{<br> if (null == obj)<br> {</t></t></p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> T t = null;</p>\n<p> try<br> {</p>\n<pre><code>t = objectMapper.readValue(obj2json(obj), clazz);\n</code></pre><p> }<br> catch (IOException e)<br> {</p>\n<pre><code>e.printStackTrace();\n</code></pre><p> }</p>\n<p> return t;<br>}</p>\n<p>/**</p>\n</li>\n<li>map convert to javaBean<br>*/<br>private static <t> T map2pojo(@SuppressWarnings(“rawtypes”)Map map, Class<t> clazz)<br>{<br> return objectMapper.convertValue(map, clazz);<br>}</t></t></li>\n</ul>\n</li>\n</ul>\n<p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>import java.io.IOException;<br>import java.text.SimpleDateFormat;<br>import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br>import java.util.Map.Entry;</p>\n<p>import org.apache.commons.lang3.StringUtils;<br>import org.springframework.util.CollectionUtils;</p>\n<p>import com.fasterxml.jackson.core.JsonProcessingException;<br>import com.fasterxml.jackson.core.type.TypeReference;<br>import com.fasterxml.jackson.databind.JsonNode;<br>import com.fasterxml.jackson.databind.ObjectMapper;</p>\n<p>/**</p>\n<ul>\n<li>基于jackson的json和object相互转换的工具类</li>\n<li>@author </li>\n<li><p>@date 2017年6月21日 上午10:00:23<br><em>/<br>public final class JsonUtil {<br>  /** 私有构造 单例 </em>/<br>  private JsonUtil(){</p>\n<p>  }</p>\n<p>  private static ObjectMapper objectMapper = null;</p>\n<p>  static<br>  {</p>\n<pre><code>// 将objectMapper 设置为全局静态缓存，提高调用效率\nobjectMapper = new ObjectMapper();\nobjectMapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;));\n</code></pre><p>  }</p>\n<p>  /*<em> 供外部调用 ObjectMapper </em>/<br>  public static ObjectMapper getObjectMapper()<br>  {</p>\n<pre><code>return objectMapper;\n</code></pre><p>  }</p>\n<p>  /**</p>\n<ul>\n<li>json串转对象</li>\n<li>@Description</li>\n<li>@param jsonStr</li>\n<li>@param clazz</li>\n<li><p>@return<br>*/<br>public static <t> T json2obj(String jsonStr, Class<t> clazz)<br>{<br> if (StringUtils.isEmpty(jsonStr))<br> {</t></t></p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> T t = null;</p>\n<p> try<br> {</p>\n<pre><code>t = objectMapper.readValue(jsonStr, clazz);\n</code></pre><p> }<br> catch (IOException e)<br> {</p>\n<p> }<br> return t;<br>}</p>\n<p>/**</p>\n</li>\n<li>json串转map对象,前提是被转换的json串value为多组k-v</li>\n<li>{“zhangjiajie”:{“price”:”fixed”,”type”:”mountain”},”jiuzhaigou”:{“price”:”fixed”,”type”:”mountain”}}</li>\n<li>@Description</li>\n<li>@param jsonStr</li>\n<li>@param clazz</li>\n<li><p>@return Map<br>*/<br>public static <t> Map&lt;String, T&gt; json2map(String jsonStr, Class<t> clazz)<br>{<br> if (StringUtils.isEmpty(jsonStr))<br> {</t></t></p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> Map&lt;String, Map&lt;String, Object&gt;&gt; map = null;<br> try<br> {</p>\n<pre><code>map = objectMapper.readValue(jsonStr,\n        new TypeReference&lt;Map&lt;String, T&gt;&gt;()\n        {\n        });\n</code></pre><p> }<br> catch (IOException e)<br> {</p>\n<p> }</p>\n<p> if (CollectionUtils.isEmpty(map))<br> {</p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> Map&lt;String, T&gt; result = new HashMap&lt;String, T&gt;();<br> for (Entry&lt;String, Map&lt;String, Object&gt;&gt; entry : map.entrySet())<br> {</p>\n<pre><code>result.put(entry.getKey(), map2pojo(entry.getValue(), clazz));\n</code></pre><p> }<br> return result;<br>}</p>\n<p>/**</p>\n</li>\n<li>json转list对象</li>\n<li>@Description</li>\n<li>@param jsonStr</li>\n<li>@param clazz</li>\n<li><p>@return List<br>*/<br>public static <t> List<t> json2list(String jsonStr, Class<t> clazz)<br>{<br> if (StringUtils.isEmpty(jsonStr))<br> {</t></t></t></p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> List&lt;Map&lt;String, Object&gt;&gt; list = null;<br> try<br> {</p>\n<pre><code>list = objectMapper.readValue(jsonStr,\n        new TypeReference&lt;List&lt;T&gt;&gt;()\n        {\n        });\n</code></pre><p> }<br> catch (IOException e)<br> {<br> }</p>\n<p> // 非空校验<br> if (CollectionUtils.isEmpty(list))<br> {</p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> List<t> result = new ArrayList<t>();<br> for (Map&lt;String, Object&gt; map : list)<br> {</t></t></p>\n<pre><code>result.add(map2pojo(map, clazz));\n</code></pre><p> }<br> return result;<br>}</p>\n<p>/**</p>\n</li>\n<li>获取json串的某个键对应的值</li>\n<li>@Description</li>\n<li>@param jsonSrc</li>\n<li>@param jsonKey</li>\n<li><p>@return<br>*/<br>public static String getJsonValue(String jsonSrc, String jsonKey)<br>{<br> if (StringUtils.isEmpty(jsonSrc) || StringUtils.isEmpty(jsonKey))<br> {</p>\n<pre><code>return null;\n</code></pre><p> }<br> JsonNode node = json2obj(jsonSrc, JsonNode.class);</p>\n<p> if(node == null)<br> {</p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> // 获取jsonKey数据<br> JsonNode dataNode = node.get(jsonKey);</p>\n<p> if (null == dataNode)<br> {</p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> return dataNode.toString();<br>}</p>\n<p>/**</p>\n</li>\n<li><p>对象转json串,维持基本类型,空值返回null</p>\n</li>\n<li><p>示例</p>\n</li>\n<li><p>{“name”:”alex”,”age”:20,”address”:null,”score”:[{“subject”:”math”,”score”:98},{“subject”:”art”,”score”:50}]}</p>\n</li>\n<li>@Description</li>\n<li>@param obj</li>\n<li><p>@return<br>*/<br>public static String obj2json(Object obj)<br>{<br> if (obj == null)<br> {</p>\n<pre><code>return null;\n</code></pre><p> }<br> String jsonResult = null;<br> try<br> {</p>\n<pre><code>jsonResult = objectMapper.writeValueAsString(obj);\n</code></pre><p> }<br> catch (JsonProcessingException e)<br> {</p>\n<p> }</p>\n<p> return jsonResult;<br>}</p>\n<p>/**</p>\n</li>\n<li>一般对象转JsonNode</li>\n<li>@Description</li>\n<li>@param obj</li>\n<li><p>@return<br>*/<br>public static JsonNode obj2node(Object obj)<br>{<br> if (null == obj)<br> {</p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> JsonNode node = null;</p>\n<p> try<br> {</p>\n<pre><code>node = objectMapper.readTree(obj2json(obj));\n</code></pre><p> }<br> catch (IOException e)<br> {<br> }</p>\n<p> return node;<br>}</p>\n<p>public static <t> T obj2T(Object obj, Class<t> clazz)<br>{<br> if (null == obj)<br> {</t></t></p>\n<pre><code>return null;\n</code></pre><p> }</p>\n<p> T t = null;</p>\n<p> try<br> {</p>\n<pre><code>t = objectMapper.readValue(obj2json(obj), clazz);\n</code></pre><p> }<br> catch (IOException e)<br> {</p>\n<pre><code>e.printStackTrace();\n</code></pre><p> }</p>\n<p> return t;<br>}</p>\n<p>/**</p>\n</li>\n<li>map convert to javaBean<br>*/<br>private static <t> T map2pojo(@SuppressWarnings(“rawtypes”)Map map, Class<t> clazz)<br>{<br> return objectMapper.convertValue(map, clazz);<br>}</t></t></li>\n</ul>\n</li>\n</ul>\n<p>}</p>\n"},{"_content":"mysql 赋给用户权限 grant all privileges on1、grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;样例：mysql> GRANT ALL PRIVILEGES ON *.* TO 'webuser'@'192.168.33.50' IDENTIFIED BY 'webuser@yeahka.com';数据库连接        mysql -u root -pa120090024 -h127.0.0.1mysql -h192.168.33.50 -uwebuser -pwebuser@yeahka.com --default-character-set=utf8 -A biz数据导入source /tmp/t_cardbin.sql数据库基本操作1、创建数据库 并制定默认的字符集是utf8create database dbname default charset  utf8 collate utf8_general_ci;JDBC连接说明，举例：jdbc:mysql://192.168.10.107:3306/lepos?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&autoReconnect=true一、useUnicode=true&amp;characterEncoding=utf-8 作用有如下两个方面：1. 存数据时：     数据库在存放项目数据的时候会先用UTF-8格式将数据解码成字节码，然后再将解码后的字节码重新使用GBK编码存放到数据库中。2.取数据时：     在从数据库中取数据的时候，数据库会先将数据库中的数据按GBK格式解码成字节码，然后再将解码后的字节码重新按UTF-8格式编码数据，最后再将数据返回给客户端。二、zeroDateTimeBehavior=convertToNull表示日期格式不正确是，把日期转换成null代替异常处理。三、jdbc:mysql://[host:port],[host:port].../[database][?参数名1][=参数值1][&参数名2][=参数值2]...几个重要的参数，如下表所示：参数名称参数说明缺省值最低版本要求user数据库用户名（用于连接数据库） 所有版本password用户密码（用于连接数据库） 所有版本useUnicode是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为truefalse1.1gcharacterEncoding当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbkfalse1.1gautoReconnect当数据库连接异常中断时，是否自动重新连接？false1.1autoReconnectForPools是否使用针对数据库连接池的重连策略false3.1.3failOverReadOnly自动重连成功后，连接是否设置为只读？true3.0.12maxReconnectsautoReconnect设置为true时，重试连接的次数31.1initialTimeoutautoReconnect设置为true时，两次重连之间的时间间隔，单位：秒21.1connectTimeout和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本03.0.1socketTimeoutsocket操作（读写）超时，单位：毫秒。 0表示永不超时03.0.1存储过程\n\n\n-- 利用存储过程批量插入数据\ncreate procedure scott(min INT,max INT)\n    begin\n    declare i int;\n    set i=min;\n    while i<max do\n        insert into t_user_info (F_uid,F_passwd,F_state,F_username,F_real_name,F_create_time) Values (i,MD5('test_user_'+i),1,concat('test_user',i),'模拟用户',now());\n        select concat(\"创建用户成功，uid=\",i);\n        set i = i+1;\n    end while;\n    end;\n    $\n注意:linux环境写存储过程时，因为';'为结束符，故要先修改结束符为'$'，命令：delimiter $\n","source":"resume/index.md","raw":"mysql 赋给用户权限 grant all privileges on1、grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;样例：mysql> GRANT ALL PRIVILEGES ON *.* TO 'webuser'@'192.168.33.50' IDENTIFIED BY 'webuser@yeahka.com';数据库连接        mysql -u root -pa120090024 -h127.0.0.1mysql -h192.168.33.50 -uwebuser -pwebuser@yeahka.com --default-character-set=utf8 -A biz数据导入source /tmp/t_cardbin.sql数据库基本操作1、创建数据库 并制定默认的字符集是utf8create database dbname default charset  utf8 collate utf8_general_ci;JDBC连接说明，举例：jdbc:mysql://192.168.10.107:3306/lepos?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&autoReconnect=true一、useUnicode=true&amp;characterEncoding=utf-8 作用有如下两个方面：1. 存数据时：     数据库在存放项目数据的时候会先用UTF-8格式将数据解码成字节码，然后再将解码后的字节码重新使用GBK编码存放到数据库中。2.取数据时：     在从数据库中取数据的时候，数据库会先将数据库中的数据按GBK格式解码成字节码，然后再将解码后的字节码重新按UTF-8格式编码数据，最后再将数据返回给客户端。二、zeroDateTimeBehavior=convertToNull表示日期格式不正确是，把日期转换成null代替异常处理。三、jdbc:mysql://[host:port],[host:port].../[database][?参数名1][=参数值1][&参数名2][=参数值2]...几个重要的参数，如下表所示：参数名称参数说明缺省值最低版本要求user数据库用户名（用于连接数据库） 所有版本password用户密码（用于连接数据库） 所有版本useUnicode是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为truefalse1.1gcharacterEncoding当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbkfalse1.1gautoReconnect当数据库连接异常中断时，是否自动重新连接？false1.1autoReconnectForPools是否使用针对数据库连接池的重连策略false3.1.3failOverReadOnly自动重连成功后，连接是否设置为只读？true3.0.12maxReconnectsautoReconnect设置为true时，重试连接的次数31.1initialTimeoutautoReconnect设置为true时，两次重连之间的时间间隔，单位：秒21.1connectTimeout和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本03.0.1socketTimeoutsocket操作（读写）超时，单位：毫秒。 0表示永不超时03.0.1存储过程\n\n\n-- 利用存储过程批量插入数据\ncreate procedure scott(min INT,max INT)\n    begin\n    declare i int;\n    set i=min;\n    while i<max do\n        insert into t_user_info (F_uid,F_passwd,F_state,F_username,F_real_name,F_create_time) Values (i,MD5('test_user_'+i),1,concat('test_user',i),'模拟用户',now());\n        select concat(\"创建用户成功，uid=\",i);\n        set i = i+1;\n    end while;\n    end;\n    $\n注意:linux环境写存储过程时，因为';'为结束符，故要先修改结束符为'$'，命令：delimiter $\n","date":"2018-06-15T01:28:39.849Z","updated":"2018-06-15T01:28:39.849Z","path":"resume/index.html","title":"","comments":1,"layout":"page","_id":"cjifdooem00026khlnhofowtk","content":"<p>mysql 赋给用户权限 grant all privileges on1、grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;样例：mysql&gt; GRANT ALL PRIVILEGES ON <em>.</em> TO ‘webuser‘@’192.168.33.50’ IDENTIFIED BY <a href=\"mailto:&#39;webuser@yeahka.com\" target=\"_blank\" rel=\"noopener\">&#39;webuser@yeahka.com</a>‘;数据库连接        mysql -u root -pa120090024 -h127.0.0.1mysql -h192.168.33.50 -uwebuser <a href=\"mailto:-pwebuser@yeahka.com\" target=\"_blank\" rel=\"noopener\">-pwebuser@yeahka.com</a> –default-character-set=utf8 -A biz数据导入source /tmp/t_cardbin.sql数据库基本操作1、创建数据库 并制定默认的字符集是utf8create database dbname default charset  utf8 collate utf8_general_ci;JDBC连接说明，举例：jdbc:mysql://192.168.10.107:3306/lepos?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true一、useUnicode=true&amp;characterEncoding=utf-8 作用有如下两个方面：1. 存数据时：     数据库在存放项目数据的时候会先用UTF-8格式将数据解码成字节码，然后再将解码后的字节码重新使用GBK编码存放到数据库中。2.取数据时：     在从数据库中取数据的时候，数据库会先将数据库中的数据按GBK格式解码成字节码，然后再将解码后的字节码重新按UTF-8格式编码数据，最后再将数据返回给客户端。二、zeroDateTimeBehavior=convertToNull表示日期格式不正确是，把日期转换成null代替异常处理。三、jdbc:mysql://[host:port],[host:port]…/[database][?参数名1][=参数值1][&amp;参数名2][=参数值2]…几个重要的参数，如下表所示：参数名称参数说明缺省值最低版本要求user数据库用户名（用于连接数据库） 所有版本password用户密码（用于连接数据库） 所有版本useUnicode是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为truefalse1.1gcharacterEncoding当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbkfalse1.1gautoReconnect当数据库连接异常中断时，是否自动重新连接？false1.1autoReconnectForPools是否使用针对数据库连接池的重连策略false3.1.3failOverReadOnly自动重连成功后，连接是否设置为只读？true3.0.12maxReconnectsautoReconnect设置为true时，重试连接的次数31.1initialTimeoutautoReconnect设置为true时，两次重连之间的时间间隔，单位：秒21.1connectTimeout和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本03.0.1socketTimeoutsocket操作（读写）超时，单位：毫秒。 0表示永不超时03.0.1存储过程</p>\n<p>– 利用存储过程批量插入数据<br>create procedure scott(min INT,max INT)<br>    begin<br>    declare i int;<br>    set i=min;<br>    while i&lt;max do<br>        insert into t_user_info (F_uid,F_passwd,F_state,F_username,F_real_name,F_create_time) Values (i,MD5(‘test_user_’+i),1,concat(‘test_user’,i),’模拟用户’,now());<br>        select concat(“创建用户成功，uid=”,i);<br>        set i = i+1;<br>    end while;<br>    end;<br>    $<br>注意:linux环境写存储过程时，因为’;’为结束符，故要先修改结束符为’$’，命令：delimiter $</p>\n","site":{"data":{}},"excerpt":"","more":"<p>mysql 赋给用户权限 grant all privileges on1、grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;样例：mysql&gt; GRANT ALL PRIVILEGES ON <em>.</em> TO ‘webuser‘@’192.168.33.50’ IDENTIFIED BY <a href=\"mailto:&#39;webuser@yeahka.com\" target=\"_blank\" rel=\"noopener\">&#39;webuser@yeahka.com</a>‘;数据库连接        mysql -u root -pa120090024 -h127.0.0.1mysql -h192.168.33.50 -uwebuser <a href=\"mailto:-pwebuser@yeahka.com\" target=\"_blank\" rel=\"noopener\">-pwebuser@yeahka.com</a> –default-character-set=utf8 -A biz数据导入source /tmp/t_cardbin.sql数据库基本操作1、创建数据库 并制定默认的字符集是utf8create database dbname default charset  utf8 collate utf8_general_ci;JDBC连接说明，举例：jdbc:mysql://192.168.10.107:3306/lepos?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true一、useUnicode=true&amp;characterEncoding=utf-8 作用有如下两个方面：1. 存数据时：     数据库在存放项目数据的时候会先用UTF-8格式将数据解码成字节码，然后再将解码后的字节码重新使用GBK编码存放到数据库中。2.取数据时：     在从数据库中取数据的时候，数据库会先将数据库中的数据按GBK格式解码成字节码，然后再将解码后的字节码重新按UTF-8格式编码数据，最后再将数据返回给客户端。二、zeroDateTimeBehavior=convertToNull表示日期格式不正确是，把日期转换成null代替异常处理。三、jdbc:mysql://[host:port],[host:port]…/[database][?参数名1][=参数值1][&amp;参数名2][=参数值2]…几个重要的参数，如下表所示：参数名称参数说明缺省值最低版本要求user数据库用户名（用于连接数据库） 所有版本password用户密码（用于连接数据库） 所有版本useUnicode是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为truefalse1.1gcharacterEncoding当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbkfalse1.1gautoReconnect当数据库连接异常中断时，是否自动重新连接？false1.1autoReconnectForPools是否使用针对数据库连接池的重连策略false3.1.3failOverReadOnly自动重连成功后，连接是否设置为只读？true3.0.12maxReconnectsautoReconnect设置为true时，重试连接的次数31.1initialTimeoutautoReconnect设置为true时，两次重连之间的时间间隔，单位：秒21.1connectTimeout和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本03.0.1socketTimeoutsocket操作（读写）超时，单位：毫秒。 0表示永不超时03.0.1存储过程</p>\n<p>– 利用存储过程批量插入数据<br>create procedure scott(min INT,max INT)<br>    begin<br>    declare i int;<br>    set i=min;<br>    while i&lt;max do<br>        insert into t_user_info (F_uid,F_passwd,F_state,F_username,F_real_name,F_create_time) Values (i,MD5(‘test_user_’+i),1,concat(‘test_user’,i),’模拟用户’,now());<br>        select concat(“创建用户成功，uid=”,i);<br>        set i = i+1;<br>    end while;<br>    end;<br>    $<br>注意:linux环境写存储过程时，因为’;’为结束符，故要先修改结束符为’$’，命令：delimiter $</p>\n"},{"title":"about","date":"2018-06-14T05:48:04.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-06-14 13:48:04\n---\n","updated":"2018-06-14T05:48:04.671Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjifdooen00036khlplk9cbzq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"yetongxue","_content":"Welcome to [yetongxue Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/yetongxue.md","raw":"---\ntitle: yetongxue\n---\nWelcome to [yetongxue Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"yetongxue","published":1,"date":"2018-06-14T03:57:23.728Z","updated":"2018-06-14T03:42:07.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjifdooeu00046khlhc4rb6ec","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">yetongxue Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">yetongxue Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"hexo从零开始到搭建完整","_content":"\nlook me\n原文地址：→看过来\n交流群\n\n有相关问题的可进群提问，Hexo交流群：111868326 （其他的前端问题也可以交流）\n前言\n\n其实平时自己写的文章并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放，不好找，所以才想着自己搭建一个人博客网站，现在大家用hexo比较多，也比较方便，并且能使用的主题也很多，所以小花就用她啦~\n本篇为从零开始的基础篇，其他SEO、评论系统、统计等请看Hexo博客添加SEO-评论系统-阅读统计-站长统计，本篇所包含的内容如下：\n安装Git Bash\n安装NodeJs\n安装hexo\n生成SSH并添加到github\n部署项目\n上传到github\n绑定个人域名\n修改及配置主题\n添加RSS\n添加评论\n写文章部分\n耍起来\n\n由于小花的电脑在搭建博客之前就有了各种环境，但是对于没有任何基础的人来讲，我觉得还是从源头开始讲会好一点，就像教别人做菜，总得把所有的用料及步骤说清楚对吧？（大佬们可以自动忽略啊啊啊啊~）\n1. 安装Git Bash\n\n我一直不太喜欢在cmd中操作各种命令，所以挑了这个比较好使的Git Bash, 我的是windows环境，所以下载windows版本并安装就可以了。\n下载地址\n安装步骤：双击下载好的exe文件，一路next就好啦\n安装好后，打开gitbash，查看版本：\n命令：git version (写这篇博客的时候最新版本：2.12.2)\n git version\n然后你就可以在这里发挥你的聪明才智了\n2. 安装NodeJs\n\nHexo是基于nodeJS环境的静态博客，里面的npm工具很有用啊，所以还是老老实实把这玩意儿装了吧\n下载地址(说明：LTS为长期支持版，Current为当前最新版)\n安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH ,这样你就不用自己去配置电脑上环境变量了，装完在按 win + r 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧。\n查看版本：\n命令：node -v\n node-version\n又到自由发挥的时候了\n3. 安装hexo\n\n看到这么多安装，千万不要紧张，小哥哥小姐姐们一定要稳住，别怕，因为后面的东西都是在gitbash中用npm工具安装就好了。\n先创建一个文件夹（用来存放所有blog的东西），然后cd到该文件夹下。\n安装hexo命令：npm i -g hexo\n安装完成后，查看版本：\nnpm-v\n初始化命令：hexo init ，初始化完成之后打开所在的文件夹可以看到以下文件：\nmyblog\n解释一下：\nnode_modules：是依赖包\npublic：存放的是生成的页面\nscaffolds：命令生成文章等的模板\nsource：用命令创建的各种文章\nthemes：主题\n_config.yml：整个博客的配置\ndb.json：source解析所得到的\npackage.json：项目所需模块项目的配置信息\n做好这些前置工作之后接下来的就是各种配配配置了。\n4. 搭桥到github\n\n没账号的创建账号，有账号的看下面。\n创建一个repo，名称为yourname.github.io, 其中yourname是你的github名称，按照这个规则创建才有用哦，如下：\nnew-repo\n create-repo\n回到gitbash中，配置github账户信息（YourName和YourEail都替换成你自己的）：\nusername\n email\n创建SSH\n在gitbash中输入：ssh-keygen -t rsa -C \"youremail@example.com，生成ssh。然后按下图的方式找到id_rsa.pub文件的内容。\nssh-key\n将上面获取的ssh放到github中：\nsettings\n ssh-key\n添加一个 New SSH key ，title随便取，key就填刚刚那一段。\n在gitbash中验证是否添加成功：ssh -T git@github.com\n完成下一步你就成功啦！\n5. 一步之遥\n\n用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n回到gitbash中，进入你的blog目录，分别执行以下命令：\nhexo clean\nhexo generate\nhexo server\n注：hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server。\n打开浏览器输入：http://localhost:4000\n接着你就可以遇见天使的微笑了~\n6. 上传到github\n\n先安装一波：npm install hexo-deployer-git --save（这样才能将你写好的文章部署到github服务器上并让别人浏览到）\n执行命令(建议每次都按照如下步骤部署)：\nhexo clean\nhexo generate\nhexo deploy\n注意deploy的过程中要输入你的username及passward。如下：\ndeploy\n在浏览器中输入http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！\n感觉gitbash中东西太多的时候输入clear命令清空。\n7. 绑定个人域名\n\n不想绑定的自行忽略\n第一步购买域名：随便在哪个网站买一个就好了，小花是在阿里云购买的visugar.com, DNS也是顺道在那买的。\n第二步添加CNAME：在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名，比如我添加的是visugar.com，只能添加一个哦。\n到DNS中添加一条记录：\n dns-note\n其中ip地址为你的github的地址，可在cmd中ping一下就能看到(ping yourname.github.io)：\n github-ip\n接着再次部署一下，用你购买的域名打开，就可以看到你的博客啦~\n8. 修改及配置主题\n\nhexo初始化之后默认的主题是landscape , 然后你可以去这个地址里面找到你想要的主题。在github中搜索你要的主题名称，里面都会有该主题的如何使用的介绍，按着来就好了，反正就是改改改！我选的是hueman,看起来挺不错，至少是我喜欢的类型。\nthemes\n跟该主题相关的配置在themes/hueman/_config.yml里面,然后根据你的需要在这配配配就行了。\nthemes-config\n有的东西我也不知道是啥玩意儿，你要多试多倒腾几次，就能意会啦\n下面是针对我所选的主题的两小点(别的主题我没看，可能也是类似):\n在导航栏添加点东西\n例如我添加了一个更新日志的模块。\n在主题的配置文件中，menu添加一栏：Board: /board。\n然后在source中添加一个board，即对应上面的名字。然后再创建一个index.md，里面可以写你想写的内容。\n在主题的hueman/langulages/zh-CN.yml中的index适当的位置加：board: '更新日志'，位置和名字是你自己设定。\n重新部署，然后就OK了\n在侧边栏添加点东西\n回到你的主题的配置文件中，找到widgets一栏，在你要添加的位置处添加一条你自定义的名称。例如我的叫communiation且放在了第二行。\n在上面所提到的zh-CN.yml文件中找到sidebar一栏，添加communiation: '你要设的名称'。\n在hueman/layout/widget中添加一个communiation.ejs,填入模板\n<% if (site.posts.length) { %>\n<div class=\"widget-wrap widget-list\">\n    <h3 class=\"widget-title\"><%= __('sidebar.communiation') %></h3>\n    <div class=\"widget\">\n        <!--这里添加你要写的内容-->\n    </div>\n</div>\n<% } %>\n9. 添加RSS\n\n先安装rss相关插件：npm i hexo-generator-feed\n在你的项目的_config.yml配置文件下找到Extensions添加如下内容：\n# Extensions  #插件和主题\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\n#RSS订阅\nplugin:\n- hexo-generator-feed\n#Feed Atom\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n进入到你的主题的配置文件下，找到你的放rss的位置，添加/atom.xml即可。\n重新部署再打开就能看到效果啦~\n10. 添加评论\n\n20170812更新：\n云更贴已在2017年8月1日停止服务，具体评论系统文章统计站长统计及百度SEO谷歌SEO什么的可参考Hexo博客添加SEO-评论系统-阅读统计-站长统计\n-----\n此段已失效。\n先选一个你要使用的第三方评论系统，最好找个靠谱点的（我使用的是网易云跟帖）。\n在主题的配置文件下找到comment，添加一行，例如我添加的是yungentie: 此处自由发挥\n注册完评论系统后获取相应的代码，然后在主题的layout下找到comment新建一个ejs模板文件，名称自定义。\nyungentie\n找到你的article.ejs模板文件，加上<%- partial('comment/你刚刚取得名字') %>保存。\n重新部署，OK啦\n11. 写文章部分\n\n新建文章：hexo new '文章名'，然后你就可以在source/_posts路径下看到你创建的文章啦，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。\n关于具体的文章编辑你可以看下官网的介绍\n至于markdown，可以自行发挥啦~\n小结一波\n\n在哪里跌倒，就在哪里趴下，休息一会儿你会发现新大陆的哦~\n本文针对的是从来没用hexo搭建过个人博客的小伙伴，不过文中获取会有一些小错误，欢迎大佬们指正，小花不胜感激！\n感觉我好啰嗦啊，可是没办法，我就是这么爱打字丫\n小花的博客\n招摇撞骗（可自行忽略）\n\n小花求赏→爱的辣条\n分类: hexo\n好文要顶 关注我 收藏该文    \n \nVisugar\n关注 - 4\n粉丝 - 22\n+加关注\n13 0\n« 上一篇：菜鸟张小花之多种布局实现\n» 下一篇：用CSS3实现饼状loading效果\nposted @ 2017-05-07 18:46 Visugar 阅读(23265) 评论(15) 编辑 收藏","source":"_posts/hello-world.md","raw":"---\ntitle: hexo从零开始到搭建完整\n---\n\nlook me\n原文地址：→看过来\n交流群\n\n有相关问题的可进群提问，Hexo交流群：111868326 （其他的前端问题也可以交流）\n前言\n\n其实平时自己写的文章并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放，不好找，所以才想着自己搭建一个人博客网站，现在大家用hexo比较多，也比较方便，并且能使用的主题也很多，所以小花就用她啦~\n本篇为从零开始的基础篇，其他SEO、评论系统、统计等请看Hexo博客添加SEO-评论系统-阅读统计-站长统计，本篇所包含的内容如下：\n安装Git Bash\n安装NodeJs\n安装hexo\n生成SSH并添加到github\n部署项目\n上传到github\n绑定个人域名\n修改及配置主题\n添加RSS\n添加评论\n写文章部分\n耍起来\n\n由于小花的电脑在搭建博客之前就有了各种环境，但是对于没有任何基础的人来讲，我觉得还是从源头开始讲会好一点，就像教别人做菜，总得把所有的用料及步骤说清楚对吧？（大佬们可以自动忽略啊啊啊啊~）\n1. 安装Git Bash\n\n我一直不太喜欢在cmd中操作各种命令，所以挑了这个比较好使的Git Bash, 我的是windows环境，所以下载windows版本并安装就可以了。\n下载地址\n安装步骤：双击下载好的exe文件，一路next就好啦\n安装好后，打开gitbash，查看版本：\n命令：git version (写这篇博客的时候最新版本：2.12.2)\n git version\n然后你就可以在这里发挥你的聪明才智了\n2. 安装NodeJs\n\nHexo是基于nodeJS环境的静态博客，里面的npm工具很有用啊，所以还是老老实实把这玩意儿装了吧\n下载地址(说明：LTS为长期支持版，Current为当前最新版)\n安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH ,这样你就不用自己去配置电脑上环境变量了，装完在按 win + r 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧。\n查看版本：\n命令：node -v\n node-version\n又到自由发挥的时候了\n3. 安装hexo\n\n看到这么多安装，千万不要紧张，小哥哥小姐姐们一定要稳住，别怕，因为后面的东西都是在gitbash中用npm工具安装就好了。\n先创建一个文件夹（用来存放所有blog的东西），然后cd到该文件夹下。\n安装hexo命令：npm i -g hexo\n安装完成后，查看版本：\nnpm-v\n初始化命令：hexo init ，初始化完成之后打开所在的文件夹可以看到以下文件：\nmyblog\n解释一下：\nnode_modules：是依赖包\npublic：存放的是生成的页面\nscaffolds：命令生成文章等的模板\nsource：用命令创建的各种文章\nthemes：主题\n_config.yml：整个博客的配置\ndb.json：source解析所得到的\npackage.json：项目所需模块项目的配置信息\n做好这些前置工作之后接下来的就是各种配配配置了。\n4. 搭桥到github\n\n没账号的创建账号，有账号的看下面。\n创建一个repo，名称为yourname.github.io, 其中yourname是你的github名称，按照这个规则创建才有用哦，如下：\nnew-repo\n create-repo\n回到gitbash中，配置github账户信息（YourName和YourEail都替换成你自己的）：\nusername\n email\n创建SSH\n在gitbash中输入：ssh-keygen -t rsa -C \"youremail@example.com，生成ssh。然后按下图的方式找到id_rsa.pub文件的内容。\nssh-key\n将上面获取的ssh放到github中：\nsettings\n ssh-key\n添加一个 New SSH key ，title随便取，key就填刚刚那一段。\n在gitbash中验证是否添加成功：ssh -T git@github.com\n完成下一步你就成功啦！\n5. 一步之遥\n\n用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n回到gitbash中，进入你的blog目录，分别执行以下命令：\nhexo clean\nhexo generate\nhexo server\n注：hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server。\n打开浏览器输入：http://localhost:4000\n接着你就可以遇见天使的微笑了~\n6. 上传到github\n\n先安装一波：npm install hexo-deployer-git --save（这样才能将你写好的文章部署到github服务器上并让别人浏览到）\n执行命令(建议每次都按照如下步骤部署)：\nhexo clean\nhexo generate\nhexo deploy\n注意deploy的过程中要输入你的username及passward。如下：\ndeploy\n在浏览器中输入http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！\n感觉gitbash中东西太多的时候输入clear命令清空。\n7. 绑定个人域名\n\n不想绑定的自行忽略\n第一步购买域名：随便在哪个网站买一个就好了，小花是在阿里云购买的visugar.com, DNS也是顺道在那买的。\n第二步添加CNAME：在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名，比如我添加的是visugar.com，只能添加一个哦。\n到DNS中添加一条记录：\n dns-note\n其中ip地址为你的github的地址，可在cmd中ping一下就能看到(ping yourname.github.io)：\n github-ip\n接着再次部署一下，用你购买的域名打开，就可以看到你的博客啦~\n8. 修改及配置主题\n\nhexo初始化之后默认的主题是landscape , 然后你可以去这个地址里面找到你想要的主题。在github中搜索你要的主题名称，里面都会有该主题的如何使用的介绍，按着来就好了，反正就是改改改！我选的是hueman,看起来挺不错，至少是我喜欢的类型。\nthemes\n跟该主题相关的配置在themes/hueman/_config.yml里面,然后根据你的需要在这配配配就行了。\nthemes-config\n有的东西我也不知道是啥玩意儿，你要多试多倒腾几次，就能意会啦\n下面是针对我所选的主题的两小点(别的主题我没看，可能也是类似):\n在导航栏添加点东西\n例如我添加了一个更新日志的模块。\n在主题的配置文件中，menu添加一栏：Board: /board。\n然后在source中添加一个board，即对应上面的名字。然后再创建一个index.md，里面可以写你想写的内容。\n在主题的hueman/langulages/zh-CN.yml中的index适当的位置加：board: '更新日志'，位置和名字是你自己设定。\n重新部署，然后就OK了\n在侧边栏添加点东西\n回到你的主题的配置文件中，找到widgets一栏，在你要添加的位置处添加一条你自定义的名称。例如我的叫communiation且放在了第二行。\n在上面所提到的zh-CN.yml文件中找到sidebar一栏，添加communiation: '你要设的名称'。\n在hueman/layout/widget中添加一个communiation.ejs,填入模板\n<% if (site.posts.length) { %>\n<div class=\"widget-wrap widget-list\">\n    <h3 class=\"widget-title\"><%= __('sidebar.communiation') %></h3>\n    <div class=\"widget\">\n        <!--这里添加你要写的内容-->\n    </div>\n</div>\n<% } %>\n9. 添加RSS\n\n先安装rss相关插件：npm i hexo-generator-feed\n在你的项目的_config.yml配置文件下找到Extensions添加如下内容：\n# Extensions  #插件和主题\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\n#RSS订阅\nplugin:\n- hexo-generator-feed\n#Feed Atom\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n进入到你的主题的配置文件下，找到你的放rss的位置，添加/atom.xml即可。\n重新部署再打开就能看到效果啦~\n10. 添加评论\n\n20170812更新：\n云更贴已在2017年8月1日停止服务，具体评论系统文章统计站长统计及百度SEO谷歌SEO什么的可参考Hexo博客添加SEO-评论系统-阅读统计-站长统计\n-----\n此段已失效。\n先选一个你要使用的第三方评论系统，最好找个靠谱点的（我使用的是网易云跟帖）。\n在主题的配置文件下找到comment，添加一行，例如我添加的是yungentie: 此处自由发挥\n注册完评论系统后获取相应的代码，然后在主题的layout下找到comment新建一个ejs模板文件，名称自定义。\nyungentie\n找到你的article.ejs模板文件，加上<%- partial('comment/你刚刚取得名字') %>保存。\n重新部署，OK啦\n11. 写文章部分\n\n新建文章：hexo new '文章名'，然后你就可以在source/_posts路径下看到你创建的文章啦，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。\n关于具体的文章编辑你可以看下官网的介绍\n至于markdown，可以自行发挥啦~\n小结一波\n\n在哪里跌倒，就在哪里趴下，休息一会儿你会发现新大陆的哦~\n本文针对的是从来没用hexo搭建过个人博客的小伙伴，不过文中获取会有一些小错误，欢迎大佬们指正，小花不胜感激！\n感觉我好啰嗦啊，可是没办法，我就是这么爱打字丫\n小花的博客\n招摇撞骗（可自行忽略）\n\n小花求赏→爱的辣条\n分类: hexo\n好文要顶 关注我 收藏该文    \n \nVisugar\n关注 - 4\n粉丝 - 22\n+加关注\n13 0\n« 上一篇：菜鸟张小花之多种布局实现\n» 下一篇：用CSS3实现饼状loading效果\nposted @ 2017-05-07 18:46 Visugar 阅读(23265) 评论(15) 编辑 收藏","slug":"hello-world","published":1,"date":"2018-06-14T03:57:23.718Z","updated":"2018-06-14T05:35:14.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjifdoof800056khl5e7dcag9","content":"<p>look me<br>原文地址：→看过来<br>交流群</p>\n<p>有相关问题的可进群提问，Hexo交流群：111868326 （其他的前端问题也可以交流）<br>前言</p>\n<p>其实平时自己写的文章并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放，不好找，所以才想着自己搭建一个人博客网站，现在大家用hexo比较多，也比较方便，并且能使用的主题也很多，所以小花就用她啦~<br>本篇为从零开始的基础篇，其他SEO、评论系统、统计等请看Hexo博客添加SEO-评论系统-阅读统计-站长统计，本篇所包含的内容如下：<br>安装Git Bash<br>安装NodeJs<br>安装hexo<br>生成SSH并添加到github<br>部署项目<br>上传到github<br>绑定个人域名<br>修改及配置主题<br>添加RSS<br>添加评论<br>写文章部分<br>耍起来</p>\n<p>由于小花的电脑在搭建博客之前就有了各种环境，但是对于没有任何基础的人来讲，我觉得还是从源头开始讲会好一点，就像教别人做菜，总得把所有的用料及步骤说清楚对吧？（大佬们可以自动忽略啊啊啊啊~）</p>\n<ol>\n<li>安装Git Bash</li>\n</ol>\n<p>我一直不太喜欢在cmd中操作各种命令，所以挑了这个比较好使的Git Bash, 我的是windows环境，所以下载windows版本并安装就可以了。<br>下载地址<br>安装步骤：双击下载好的exe文件，一路next就好啦<br>安装好后，打开gitbash，查看版本：<br>命令：git version (写这篇博客的时候最新版本：2.12.2)<br> git version<br>然后你就可以在这里发挥你的聪明才智了</p>\n<ol start=\"2\">\n<li>安装NodeJs</li>\n</ol>\n<p>Hexo是基于nodeJS环境的静态博客，里面的npm工具很有用啊，所以还是老老实实把这玩意儿装了吧<br>下载地址(说明：LTS为长期支持版，Current为当前最新版)<br>安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH ,这样你就不用自己去配置电脑上环境变量了，装完在按 win + r 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧。<br>查看版本：<br>命令：node -v<br> node-version<br>又到自由发挥的时候了</p>\n<ol start=\"3\">\n<li>安装hexo</li>\n</ol>\n<p>看到这么多安装，千万不要紧张，小哥哥小姐姐们一定要稳住，别怕，因为后面的东西都是在gitbash中用npm工具安装就好了。<br>先创建一个文件夹（用来存放所有blog的东西），然后cd到该文件夹下。<br>安装hexo命令：npm i -g hexo<br>安装完成后，查看版本：<br>npm-v<br>初始化命令：hexo init ，初始化完成之后打开所在的文件夹可以看到以下文件：<br>myblog<br>解释一下：<br>node_modules：是依赖包<br>public：存放的是生成的页面<br>scaffolds：命令生成文章等的模板<br>source：用命令创建的各种文章<br>themes：主题<br>_config.yml：整个博客的配置<br>db.json：source解析所得到的<br>package.json：项目所需模块项目的配置信息<br>做好这些前置工作之后接下来的就是各种配配配置了。</p>\n<ol start=\"4\">\n<li>搭桥到github</li>\n</ol>\n<p>没账号的创建账号，有账号的看下面。<br>创建一个repo，名称为yourname.github.io, 其中yourname是你的github名称，按照这个规则创建才有用哦，如下：<br>new-repo<br> create-repo<br>回到gitbash中，配置github账户信息（YourName和YourEail都替换成你自己的）：<br>username<br> email<br>创建SSH<br>在gitbash中输入：ssh-keygen -t rsa -C “<a href=\"mailto:youremail@example.com\" target=\"_blank\" rel=\"noopener\">youremail@example.com</a>，生成ssh。然后按下图的方式找到id_rsa.pub文件的内容。<br>ssh-key<br>将上面获取的ssh放到github中：<br>settings<br> ssh-key<br>添加一个 New SSH key ，title随便取，key就填刚刚那一段。<br>在gitbash中验证是否添加成功：ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a><br>完成下一步你就成功啦！</p>\n<ol start=\"5\">\n<li>一步之遥</li>\n</ol>\n<p>用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：<br>deploy:<br>  type: git<br>  repo: <a href=\"https://github.com/YourgithubName/YourgithubName.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/YourgithubName/YourgithubName.github.io.git</a><br>  branch: master<br>回到gitbash中，进入你的blog目录，分别执行以下命令：<br>hexo clean<br>hexo generate<br>hexo server<br>注：hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server。<br>打开浏览器输入：<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a><br>接着你就可以遇见天使的微笑了~</p>\n<ol start=\"6\">\n<li>上传到github</li>\n</ol>\n<p>先安装一波：npm install hexo-deployer-git –save（这样才能将你写好的文章部署到github服务器上并让别人浏览到）<br>执行命令(建议每次都按照如下步骤部署)：<br>hexo clean<br>hexo generate<br>hexo deploy<br>注意deploy的过程中要输入你的username及passward。如下：<br>deploy<br>在浏览器中输入<a href=\"http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！\" target=\"_blank\" rel=\"noopener\">http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！</a><br>感觉gitbash中东西太多的时候输入clear命令清空。</p>\n<ol start=\"7\">\n<li>绑定个人域名</li>\n</ol>\n<p>不想绑定的自行忽略<br>第一步购买域名：随便在哪个网站买一个就好了，小花是在阿里云购买的visugar.com, DNS也是顺道在那买的。<br>第二步添加CNAME：在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名，比如我添加的是visugar.com，只能添加一个哦。<br>到DNS中添加一条记录：<br> dns-note<br>其中ip地址为你的github的地址，可在cmd中ping一下就能看到(ping yourname.github.io)：<br> github-ip<br>接着再次部署一下，用你购买的域名打开，就可以看到你的博客啦~</p>\n<ol start=\"8\">\n<li>修改及配置主题</li>\n</ol>\n<p>hexo初始化之后默认的主题是landscape , 然后你可以去这个地址里面找到你想要的主题。在github中搜索你要的主题名称，里面都会有该主题的如何使用的介绍，按着来就好了，反正就是改改改！我选的是hueman,看起来挺不错，至少是我喜欢的类型。<br>themes<br>跟该主题相关的配置在themes/hueman/_config.yml里面,然后根据你的需要在这配配配就行了。<br>themes-config<br>有的东西我也不知道是啥玩意儿，你要多试多倒腾几次，就能意会啦<br>下面是针对我所选的主题的两小点(别的主题我没看，可能也是类似):<br>在导航栏添加点东西<br>例如我添加了一个更新日志的模块。<br>在主题的配置文件中，menu添加一栏：Board: /board。<br>然后在source中添加一个board，即对应上面的名字。然后再创建一个index.md，里面可以写你想写的内容。<br>在主题的hueman/langulages/zh-CN.yml中的index适当的位置加：board: ‘更新日志’，位置和名字是你自己设定。<br>重新部署，然后就OK了<br>在侧边栏添加点东西<br>回到你的主题的配置文件中，找到widgets一栏，在你要添加的位置处添加一条你自定义的名称。例如我的叫communiation且放在了第二行。<br>在上面所提到的zh-CN.yml文件中找到sidebar一栏，添加communiation: ‘你要设的名称’。<br>在hueman/layout/widget中添加一个communiation.ejs,填入模板<br>&lt;% if (site.posts.length) { %&gt;</p>\n<p><div class=\"widget-wrap widget-list\"><br>    <h3 class=\"widget-title\">&lt;%= __(‘sidebar.communiation’) %&gt;</h3><br>    <div class=\"widget\"><br>        <!--这里添加你要写的内容--><br>    </div><br></div><br>&lt;% } %&gt;</p>\n<ol start=\"9\">\n<li>添加RSS</li>\n</ol>\n<p>先安装rss相关插件：npm i hexo-generator-feed<br>在你的项目的_config.yml配置文件下找到Extensions添加如下内容：</p>\n<h1 id=\"Extensions-插件和主题\"><a href=\"#Extensions-插件和主题\" class=\"headerlink\" title=\"Extensions  #插件和主题\"></a>Extensions  #插件和主题</h1><h2 id=\"Plugins-https-hexo-io-plugins\"><a href=\"#Plugins-https-hexo-io-plugins\" class=\"headerlink\" title=\"Plugins: https://hexo.io/plugins/\"></a>Plugins: <a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/plugins/</a></h2><h2 id=\"Themes-https-hexo-io-themes\"><a href=\"#Themes-https-hexo-io-themes\" class=\"headerlink\" title=\"Themes: https://hexo.io/themes/\"></a>Themes: <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></h2><p>#RSS订阅<br>plugin:</p>\n<ul>\n<li>hexo-generator-feed<br>#Feed Atom<br>feed:<br>type: atom<br>path: atom.xml<br>limit: 20<br>进入到你的主题的配置文件下，找到你的放rss的位置，添加/atom.xml即可。<br>重新部署再打开就能看到效果啦~</li>\n</ul>\n<ol start=\"10\">\n<li>添加评论</li>\n</ol>\n<p>20170812更新：</p>\n<h2 id=\"云更贴已在2017年8月1日停止服务，具体评论系统文章统计站长统计及百度SEO谷歌SEO什么的可参考Hexo博客添加SEO-评论系统-阅读统计-站长统计\"><a href=\"#云更贴已在2017年8月1日停止服务，具体评论系统文章统计站长统计及百度SEO谷歌SEO什么的可参考Hexo博客添加SEO-评论系统-阅读统计-站长统计\" class=\"headerlink\" title=\"云更贴已在2017年8月1日停止服务，具体评论系统文章统计站长统计及百度SEO谷歌SEO什么的可参考Hexo博客添加SEO-评论系统-阅读统计-站长统计\"></a>云更贴已在2017年8月1日停止服务，具体评论系统文章统计站长统计及百度SEO谷歌SEO什么的可参考Hexo博客添加SEO-评论系统-阅读统计-站长统计</h2><p>此段已失效。<br>先选一个你要使用的第三方评论系统，最好找个靠谱点的（我使用的是网易云跟帖）。<br>在主题的配置文件下找到comment，添加一行，例如我添加的是yungentie: 此处自由发挥<br>注册完评论系统后获取相应的代码，然后在主题的layout下找到comment新建一个ejs模板文件，名称自定义。<br>yungentie<br>找到你的article.ejs模板文件，加上&lt;%- partial(‘comment/你刚刚取得名字’) %&gt;保存。<br>重新部署，OK啦</p>\n<ol start=\"11\">\n<li>写文章部分</li>\n</ol>\n<p>新建文章：hexo new ‘文章名’，然后你就可以在source/_posts路径下看到你创建的文章啦，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。<br>关于具体的文章编辑你可以看下官网的介绍<br>至于markdown，可以自行发挥啦~<br>小结一波</p>\n<p>在哪里跌倒，就在哪里趴下，休息一会儿你会发现新大陆的哦~<br>本文针对的是从来没用hexo搭建过个人博客的小伙伴，不过文中获取会有一些小错误，欢迎大佬们指正，小花不胜感激！<br>感觉我好啰嗦啊，可是没办法，我就是这么爱打字丫<br>小花的博客<br>招摇撞骗（可自行忽略）</p>\n<p>小花求赏→爱的辣条<br>分类: hexo<br>好文要顶 关注我 收藏该文    </p>\n<p>Visugar<br>关注 - 4<br>粉丝 - 22<br>+加关注<br>13 0<br>« 上一篇：菜鸟张小花之多种布局实现<br>» 下一篇：用CSS3实现饼状loading效果<br>posted @ 2017-05-07 18:46 Visugar 阅读(23265) 评论(15) 编辑 收藏</p>\n","site":{"data":{}},"excerpt":"","more":"<p>look me<br>原文地址：→看过来<br>交流群</p>\n<p>有相关问题的可进群提问，Hexo交流群：111868326 （其他的前端问题也可以交流）<br>前言</p>\n<p>其实平时自己写的文章并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放，不好找，所以才想着自己搭建一个人博客网站，现在大家用hexo比较多，也比较方便，并且能使用的主题也很多，所以小花就用她啦~<br>本篇为从零开始的基础篇，其他SEO、评论系统、统计等请看Hexo博客添加SEO-评论系统-阅读统计-站长统计，本篇所包含的内容如下：<br>安装Git Bash<br>安装NodeJs<br>安装hexo<br>生成SSH并添加到github<br>部署项目<br>上传到github<br>绑定个人域名<br>修改及配置主题<br>添加RSS<br>添加评论<br>写文章部分<br>耍起来</p>\n<p>由于小花的电脑在搭建博客之前就有了各种环境，但是对于没有任何基础的人来讲，我觉得还是从源头开始讲会好一点，就像教别人做菜，总得把所有的用料及步骤说清楚对吧？（大佬们可以自动忽略啊啊啊啊~）</p>\n<ol>\n<li>安装Git Bash</li>\n</ol>\n<p>我一直不太喜欢在cmd中操作各种命令，所以挑了这个比较好使的Git Bash, 我的是windows环境，所以下载windows版本并安装就可以了。<br>下载地址<br>安装步骤：双击下载好的exe文件，一路next就好啦<br>安装好后，打开gitbash，查看版本：<br>命令：git version (写这篇博客的时候最新版本：2.12.2)<br> git version<br>然后你就可以在这里发挥你的聪明才智了</p>\n<ol start=\"2\">\n<li>安装NodeJs</li>\n</ol>\n<p>Hexo是基于nodeJS环境的静态博客，里面的npm工具很有用啊，所以还是老老实实把这玩意儿装了吧<br>下载地址(说明：LTS为长期支持版，Current为当前最新版)<br>安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH ,这样你就不用自己去配置电脑上环境变量了，装完在按 win + r 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧。<br>查看版本：<br>命令：node -v<br> node-version<br>又到自由发挥的时候了</p>\n<ol start=\"3\">\n<li>安装hexo</li>\n</ol>\n<p>看到这么多安装，千万不要紧张，小哥哥小姐姐们一定要稳住，别怕，因为后面的东西都是在gitbash中用npm工具安装就好了。<br>先创建一个文件夹（用来存放所有blog的东西），然后cd到该文件夹下。<br>安装hexo命令：npm i -g hexo<br>安装完成后，查看版本：<br>npm-v<br>初始化命令：hexo init ，初始化完成之后打开所在的文件夹可以看到以下文件：<br>myblog<br>解释一下：<br>node_modules：是依赖包<br>public：存放的是生成的页面<br>scaffolds：命令生成文章等的模板<br>source：用命令创建的各种文章<br>themes：主题<br>_config.yml：整个博客的配置<br>db.json：source解析所得到的<br>package.json：项目所需模块项目的配置信息<br>做好这些前置工作之后接下来的就是各种配配配置了。</p>\n<ol start=\"4\">\n<li>搭桥到github</li>\n</ol>\n<p>没账号的创建账号，有账号的看下面。<br>创建一个repo，名称为yourname.github.io, 其中yourname是你的github名称，按照这个规则创建才有用哦，如下：<br>new-repo<br> create-repo<br>回到gitbash中，配置github账户信息（YourName和YourEail都替换成你自己的）：<br>username<br> email<br>创建SSH<br>在gitbash中输入：ssh-keygen -t rsa -C “<a href=\"mailto:youremail@example.com\" target=\"_blank\" rel=\"noopener\">youremail@example.com</a>，生成ssh。然后按下图的方式找到id_rsa.pub文件的内容。<br>ssh-key<br>将上面获取的ssh放到github中：<br>settings<br> ssh-key<br>添加一个 New SSH key ，title随便取，key就填刚刚那一段。<br>在gitbash中验证是否添加成功：ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a><br>完成下一步你就成功啦！</p>\n<ol start=\"5\">\n<li>一步之遥</li>\n</ol>\n<p>用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：<br>deploy:<br>  type: git<br>  repo: <a href=\"https://github.com/YourgithubName/YourgithubName.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/YourgithubName/YourgithubName.github.io.git</a><br>  branch: master<br>回到gitbash中，进入你的blog目录，分别执行以下命令：<br>hexo clean<br>hexo generate<br>hexo server<br>注：hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server。<br>打开浏览器输入：<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a><br>接着你就可以遇见天使的微笑了~</p>\n<ol start=\"6\">\n<li>上传到github</li>\n</ol>\n<p>先安装一波：npm install hexo-deployer-git –save（这样才能将你写好的文章部署到github服务器上并让别人浏览到）<br>执行命令(建议每次都按照如下步骤部署)：<br>hexo clean<br>hexo generate<br>hexo deploy<br>注意deploy的过程中要输入你的username及passward。如下：<br>deploy<br>在浏览器中输入<a href=\"http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！\" target=\"_blank\" rel=\"noopener\">http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！</a><br>感觉gitbash中东西太多的时候输入clear命令清空。</p>\n<ol start=\"7\">\n<li>绑定个人域名</li>\n</ol>\n<p>不想绑定的自行忽略<br>第一步购买域名：随便在哪个网站买一个就好了，小花是在阿里云购买的visugar.com, DNS也是顺道在那买的。<br>第二步添加CNAME：在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名，比如我添加的是visugar.com，只能添加一个哦。<br>到DNS中添加一条记录：<br> dns-note<br>其中ip地址为你的github的地址，可在cmd中ping一下就能看到(ping yourname.github.io)：<br> github-ip<br>接着再次部署一下，用你购买的域名打开，就可以看到你的博客啦~</p>\n<ol start=\"8\">\n<li>修改及配置主题</li>\n</ol>\n<p>hexo初始化之后默认的主题是landscape , 然后你可以去这个地址里面找到你想要的主题。在github中搜索你要的主题名称，里面都会有该主题的如何使用的介绍，按着来就好了，反正就是改改改！我选的是hueman,看起来挺不错，至少是我喜欢的类型。<br>themes<br>跟该主题相关的配置在themes/hueman/_config.yml里面,然后根据你的需要在这配配配就行了。<br>themes-config<br>有的东西我也不知道是啥玩意儿，你要多试多倒腾几次，就能意会啦<br>下面是针对我所选的主题的两小点(别的主题我没看，可能也是类似):<br>在导航栏添加点东西<br>例如我添加了一个更新日志的模块。<br>在主题的配置文件中，menu添加一栏：Board: /board。<br>然后在source中添加一个board，即对应上面的名字。然后再创建一个index.md，里面可以写你想写的内容。<br>在主题的hueman/langulages/zh-CN.yml中的index适当的位置加：board: ‘更新日志’，位置和名字是你自己设定。<br>重新部署，然后就OK了<br>在侧边栏添加点东西<br>回到你的主题的配置文件中，找到widgets一栏，在你要添加的位置处添加一条你自定义的名称。例如我的叫communiation且放在了第二行。<br>在上面所提到的zh-CN.yml文件中找到sidebar一栏，添加communiation: ‘你要设的名称’。<br>在hueman/layout/widget中添加一个communiation.ejs,填入模板<br>&lt;% if (site.posts.length) { %&gt;</p>\n<p><div class=\"widget-wrap widget-list\"><br>    <h3 class=\"widget-title\">&lt;%= __(‘sidebar.communiation’) %&gt;</h3><br>    <div class=\"widget\"><br>        <!--这里添加你要写的内容--><br>    </div><br></div><br>&lt;% } %&gt;</p>\n<ol start=\"9\">\n<li>添加RSS</li>\n</ol>\n<p>先安装rss相关插件：npm i hexo-generator-feed<br>在你的项目的_config.yml配置文件下找到Extensions添加如下内容：</p>\n<h1 id=\"Extensions-插件和主题\"><a href=\"#Extensions-插件和主题\" class=\"headerlink\" title=\"Extensions  #插件和主题\"></a>Extensions  #插件和主题</h1><h2 id=\"Plugins-https-hexo-io-plugins\"><a href=\"#Plugins-https-hexo-io-plugins\" class=\"headerlink\" title=\"Plugins: https://hexo.io/plugins/\"></a>Plugins: <a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/plugins/</a></h2><h2 id=\"Themes-https-hexo-io-themes\"><a href=\"#Themes-https-hexo-io-themes\" class=\"headerlink\" title=\"Themes: https://hexo.io/themes/\"></a>Themes: <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></h2><p>#RSS订阅<br>plugin:</p>\n<ul>\n<li>hexo-generator-feed<br>#Feed Atom<br>feed:<br>type: atom<br>path: atom.xml<br>limit: 20<br>进入到你的主题的配置文件下，找到你的放rss的位置，添加/atom.xml即可。<br>重新部署再打开就能看到效果啦~</li>\n</ul>\n<ol start=\"10\">\n<li>添加评论</li>\n</ol>\n<p>20170812更新：</p>\n<h2 id=\"云更贴已在2017年8月1日停止服务，具体评论系统文章统计站长统计及百度SEO谷歌SEO什么的可参考Hexo博客添加SEO-评论系统-阅读统计-站长统计\"><a href=\"#云更贴已在2017年8月1日停止服务，具体评论系统文章统计站长统计及百度SEO谷歌SEO什么的可参考Hexo博客添加SEO-评论系统-阅读统计-站长统计\" class=\"headerlink\" title=\"云更贴已在2017年8月1日停止服务，具体评论系统文章统计站长统计及百度SEO谷歌SEO什么的可参考Hexo博客添加SEO-评论系统-阅读统计-站长统计\"></a>云更贴已在2017年8月1日停止服务，具体评论系统文章统计站长统计及百度SEO谷歌SEO什么的可参考Hexo博客添加SEO-评论系统-阅读统计-站长统计</h2><p>此段已失效。<br>先选一个你要使用的第三方评论系统，最好找个靠谱点的（我使用的是网易云跟帖）。<br>在主题的配置文件下找到comment，添加一行，例如我添加的是yungentie: 此处自由发挥<br>注册完评论系统后获取相应的代码，然后在主题的layout下找到comment新建一个ejs模板文件，名称自定义。<br>yungentie<br>找到你的article.ejs模板文件，加上&lt;%- partial(‘comment/你刚刚取得名字’) %&gt;保存。<br>重新部署，OK啦</p>\n<ol start=\"11\">\n<li>写文章部分</li>\n</ol>\n<p>新建文章：hexo new ‘文章名’，然后你就可以在source/_posts路径下看到你创建的文章啦，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。<br>关于具体的文章编辑你可以看下官网的介绍<br>至于markdown，可以自行发挥啦~<br>小结一波</p>\n<p>在哪里跌倒，就在哪里趴下，休息一会儿你会发现新大陆的哦~<br>本文针对的是从来没用hexo搭建过个人博客的小伙伴，不过文中获取会有一些小错误，欢迎大佬们指正，小花不胜感激！<br>感觉我好啰嗦啊，可是没办法，我就是这么爱打字丫<br>小花的博客<br>招摇撞骗（可自行忽略）</p>\n<p>小花求赏→爱的辣条<br>分类: hexo<br>好文要顶 关注我 收藏该文    </p>\n<p>Visugar<br>关注 - 4<br>粉丝 - 22<br>+加关注<br>13 0<br>« 上一篇：菜鸟张小花之多种布局实现<br>» 下一篇：用CSS3实现饼状loading效果<br>posted @ 2017-05-07 18:46 Visugar 阅读(23265) 评论(15) 编辑 收藏</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}