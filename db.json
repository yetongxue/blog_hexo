{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/photos/20180615095642.png","path":"photos/20180615095642.png","modified":0,"renderable":0},{"_id":"source/photos/20180615111444.png","path":"photos/20180615111444.png","modified":0,"renderable":0},{"_id":"source/photos/20180615130801.jpg","path":"photos/20180615130801.jpg","modified":0,"renderable":0},{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/robots.txt","path":"robots.txt","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/tagcanvas.js","path":"js/tagcanvas.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/tagcloud.js","path":"js/tagcloud.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/prettify.js","path":"js/prettify.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/weixin_favicon.png","path":"weixin_favicon.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","path":"css/lib/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","path":"css/lib/prettify-tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","path":"css/images/side-user-cover.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/materialize.min.js","path":"js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","path":"css/lib/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","path":"css/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","path":"css/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","path":"css/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","path":"css/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","path":"css/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","path":"css/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","path":"css/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","path":"css/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","path":"css/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","path":"css/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","path":"css/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","path":"css/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","path":"css/font/font-awesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","path":"css/font/font-awesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","path":"css/font/font-awesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","path":"css/font/font-awesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","path":"css/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","path":"css/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","path":"css/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","path":"css/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","path":"css/font/font-awesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","path":"css/font/font-awesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529069053947},{"_id":"themes/BlueLake/README.en.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529069046301},{"_id":"source/index.md","hash":"fb86bea9b3fe01ef42b0d13ae60f408eee00d09e","modified":1528979500920},{"_id":"source/resum.md","hash":"20a987ace894c29495765de3e36d3a5676482c62","modified":1529067239859},{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1528979500921},{"_id":"themes/BlueLake/db.json","hash":"dfe8380263ace8fb180b4eb527e82db3e5a11978","modified":1528979500924},{"_id":"themes/BlueLake/_config.yml","hash":"102166ce52a7ec9544727d1a7e84c09787e4ce20","modified":1529067239864},{"_id":"themes/BlueLake/package.json","hash":"066a334651c9e376c43dbfb592b9ed8e124d0d1a","modified":1529069064525},{"_id":"source/_posts/FAQ.md","hash":"2f5e272e95f96f082ec81ce300fd1bb14df27bb7","modified":1529070592185},{"_id":"source/_posts/httpUtil.md","hash":"fd93ac4b5ba3d3a54e77a215d390d17282bc0891","modified":1529070568910},{"_id":"source/_posts/jsonUtil.md","hash":"e527fdc526a8140c8fb7cea953c017acccbe6344","modified":1529070578050},{"_id":"source/_posts/signUtil.md","hash":"4fcf91f32ae8f15d4a2fa1cb83746cf890487e0d","modified":1529070581672},{"_id":"source/code/httpUtil.md","hash":"31cb891b60302c4f754c7b808a675ebf3c22d3d1","modified":1529067239853},{"_id":"source/about/index.md","hash":"edaa0c8b771945fdb5dcef34dc3a5b5ffd9badb4","modified":1529072449399},{"_id":"source/code/index.md","hash":"59d811087b65f11438c92c163800eec600021422","modified":1529067239855},{"_id":"source/photos/20180615095642.png","hash":"ff6910635fea66a9e99c85c89b83c88dce5a0334","modified":1529067239856},{"_id":"source/photos/20180615111444.png","hash":"4084b72b27f7b7a73e7006242afd861d18edb683","modified":1529067239857},{"_id":"source/photos/20180615130801.jpg","hash":"5e7523ddcf1c03f8bc9f6f2b8674413d8b625484","modified":1529067239858},{"_id":"source/resume/index.md","hash":"e27add9b88d932f303e1acb35ddcef189aa9d581","modified":1529071668445},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"a127deb32d1df69bbe50a3824a5f90472513c9c3","modified":1528979500925},{"_id":"source/resume/resume.md","hash":"d0be5b45bbc26383df54cf1ef81fb282b49f3c85","modified":1529067239862},{"_id":"themes/BlueLake/languages/en.yml","hash":"95bac2c366505d016b5defc47370679b9f5f3c4b","modified":1528979500926},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"bd97d5e4b39d30da1644b90256dfc4e6b1d76988","modified":1528979500927},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"baa68725feeec6643f875a532a9d55ba8aacdb2c","modified":1528979500926},{"_id":"themes/BlueLake/languages/tr.yml","hash":"5f13d55fdd5bdd1115075736e3e26a1ea1dd1dea","modified":1528979500929},{"_id":"themes/BlueLake/languages/ko.yml","hash":"fc8826724f570136d9a2d3ec2705b7b7000e0f14","modified":1528979500928},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"d7f5842295509746f878e627c4c7e298f3f1613a","modified":1528979500929},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"d4d587ba81864910715c0c3879605cc6a9362e09","modified":1528979500930},{"_id":"themes/BlueLake/layout/archive.jade","hash":"98d9fb812edbc180878fdadb65bc38499eef2cc4","modified":1528979500944},{"_id":"themes/BlueLake/layout/base.jade","hash":"bc093b5a0aee3427092f58f222f607c7dc23305f","modified":1528979500944},{"_id":"themes/BlueLake/layout/category.jade","hash":"9f3a9f1d6f0bbad258b308ad8d49128c05b422cf","modified":1528979500944},{"_id":"themes/BlueLake/layout/index.jade","hash":"dd81d9f7a6b388de2ab731b17b3ba55f70df4a5f","modified":1528979500944},{"_id":"themes/BlueLake/layout/page.jade","hash":"415404398931d98db28bff723886b07dcb8bbbc3","modified":1528979500944},{"_id":"themes/BlueLake/layout/post.jade","hash":"0305258c33e4d02f977ee1aaf7f2429b993fda17","modified":1528979500944},{"_id":"themes/BlueLake/layout/tag.jade","hash":"50c7af7565751db5d7672beb434768885fb224cb","modified":1528979500944},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1528979500944},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1528979500944},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"3f11d2b5a4c647bf2b37c4d00bdc250cda80b770","modified":1528979500932},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"c1f1955d12aee22a931a3f4ad9d0e9a408e80f3c","modified":1528979500933},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"21d05990aa5a19632f9ed51085ef7727adeea17a","modified":1528979500933},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"d970c81b5cdbd7c0348ee28e93bcbb006d613b6d","modified":1528979500934},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"c3a2f0f195887abfe426f1b81491b58cf8e170b9","modified":1529069001450},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1528979500936},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1528979500935},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1528979500937},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1528979500938},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1528979500937},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"4f2fba7fcb39a6bf70ff04dad9a3dab2563b21e7","modified":1528979500938},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1528979500939},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"6e587b7d254d0d92b959ba58262f5e81b618eba2","modified":1528979500941},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"ba0839518db2cb9dafee67ca5e471219bfba2e90","modified":1528979500939},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1528979500940},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"9af40206a525db1cb9761fa6facb36332057acf3","modified":1528979500942},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"0107affa0c6b22e09546fcf82a6f71ba2dd1e315","modified":1528979500941},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"164a83faaf92ec19d268fd303bf6e30348ddef5c","modified":1528979500943},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1528979500943},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1528979500944},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1528979500944},{"_id":"themes/BlueLake/source/css/style.styl","hash":"45776bc176bc8ed0d664e953e23d6a0a9a030929","modified":1528979500944},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1528979500944},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1528979500954},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"9e68d688f2f12ec193ce9496beb0fd42e1de2288","modified":1528979500954},{"_id":"themes/BlueLake/source/js/totop.js","hash":"d9367c6fa3e973bc5f32ce38d951858455726a02","modified":1528979500954},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1528979500954},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1528979500954},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1528979500954},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1528979500954},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1528979500954},{"_id":"themes/BlueLake/layout/empty.jade","hash":"0b2f5e3fa0ac111d0ba084af1b80cb319825bf08","modified":1529071641384},{"_id":"themes/raytaylorism/.gitignore","hash":"3ba1b7b4baceca12575cc0f212e13a504af994a7","modified":1529052606000},{"_id":"themes/raytaylorism/Gruntfile.js","hash":"f0c204fc7b3343417cc1a0fdca12ab089394b654","modified":1529052606000},{"_id":"themes/raytaylorism/LICENSE","hash":"391dd84c2091363936603d63cc71ba1628a13c86","modified":1529052606000},{"_id":"themes/raytaylorism/_config.yml","hash":"58cf83c7b80386df685c0ace7bb013ff267ebf0d","modified":1529072894115},{"_id":"themes/raytaylorism/README.md","hash":"9e5d5bbf2cebd80c9a8737c390b038a7e1565a93","modified":1529052606000},{"_id":"themes/raytaylorism/log.md","hash":"e6b93891f941c723524b143b69b0d303064db54b","modified":1529052606000},{"_id":"themes/raytaylorism/_data/about.json","hash":"25aaf77b982304e6618dffd14d8b2fa25ee5649b","modified":1529052606000},{"_id":"themes/raytaylorism/_data/hint.json","hash":"dabb8eb989db7fbbfad1e505d0019002f27ac72b","modified":1529052606000},{"_id":"themes/raytaylorism/_data/link.json","hash":"cafb8df66a02d87de1db9ea51a0cfe33edeed393","modified":1529052606000},{"_id":"themes/raytaylorism/languages/default.yml","hash":"16676af43c1690f5e5021b7dd71058a5f911b434","modified":1529052606000},{"_id":"themes/raytaylorism/_data/reading.json","hash":"796f64f4ef44b38504bd88d9b5eec0284d53c15f","modified":1529052606000},{"_id":"themes/raytaylorism/languages/zh-TW.yml","hash":"2a1ffa8ea9e799b447b5cdf4b11b7b47317c6f29","modified":1529052606000},{"_id":"themes/raytaylorism/_data/slider.json","hash":"1921c801bb21e1bcde5207d38a3f2d06ff0b2f90","modified":1529052606000},{"_id":"themes/raytaylorism/languages/zh-CN.yml","hash":"91b0053477c6884546f207966f6b9c6dce0bfee1","modified":1529052606000},{"_id":"themes/raytaylorism/source/robots.txt","hash":"6dfc427fe73587726797f47c981e2f24f5dcc61f","modified":1529052606000},{"_id":"themes/raytaylorism/layout/archive.ejs","hash":"7c85cc1ab9c0b566a278770c639341b6ea9f5655","modified":1529052606000},{"_id":"themes/raytaylorism/layout/default.ejs","hash":"2a45fd523037e752709947d01abe9081707fdff7","modified":1529052606000},{"_id":"themes/raytaylorism/layout/about.ejs","hash":"8730c43d5e5515282c6a266b884b262f69baacc5","modified":1529052606000},{"_id":"themes/raytaylorism/layout/index.ejs","hash":"34cbcb6c75e2eef622fea6fecebfe15fb7522a95","modified":1529052606000},{"_id":"themes/raytaylorism/layout/layout.ejs","hash":"0fbced6bf0129f550ad66d57735d269b70728b49","modified":1529052606000},{"_id":"themes/raytaylorism/layout/page.ejs","hash":"65f271da5806eed69c120bef89ee4c6af45af9fd","modified":1529052606000},{"_id":"themes/raytaylorism/layout/reading.ejs","hash":"52906ee0e7e679d417d5bc385e054e16e9ff0256","modified":1529052606000},{"_id":"themes/raytaylorism/layout/post.ejs","hash":"8910b2feac8c0f16c702afbd6182f91a5a90b3c6","modified":1529052606000},{"_id":"themes/raytaylorism/layout/tag.ejs","hash":"e6d10ddf00c326b012d10cfa2521c2697f18bf9b","modified":1529052606000},{"_id":"themes/raytaylorism/layout/tags.ejs","hash":"c2375e6fd959bf4f559809839773f7ff2e3d6d11","modified":1529052606000},{"_id":"themes/raytaylorism/source/favicon.png","hash":"cbc07410902b5ddbc57a596a86d2f20a5dff8102","modified":1529052606000},{"_id":"themes/raytaylorism/_md/about/index.md","hash":"ee081f0766b1bbdd72b9a254a934033878dd1571","modified":1529052606000},{"_id":"themes/raytaylorism/_md/reading/index.md","hash":"ffe64363f79a74ca022f15447a03a96808c64794","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/style.styl","hash":"2c7ef7179e29084efe77c653d537b56889734a22","modified":1529052606000},{"_id":"themes/raytaylorism/source/js/tagcanvas.js","hash":"db9a61a79350d1618a74a8f3448f06046c3d9a6c","modified":1529052606000},{"_id":"themes/raytaylorism/source/js/tagcloud.js","hash":"f8cf86b40c424f3cb661899239529bd7a65f2d97","modified":1529052606000},{"_id":"themes/raytaylorism/source/js/prettify.js","hash":"d24b1da342b5c2d0582f0922118aaf0b2a6840d5","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/after_footer.ejs","hash":"77476565bc85987d7656751cbc27b473223b0186","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/archive.ejs","hash":"6fc4dc05d153dbf1dd955df4ff19c380692f87e9","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/archive_title.ejs","hash":"37c38ef6972ddd92668ea08983f4b34230b39d52","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/construction.ejs","hash":"571115474d7c1acb382334931f02514b23e851a3","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/article.ejs","hash":"eafbb82121654366d44308dded28a9d17afa1412","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/float.ejs","hash":"42ad838e39c007226eb4151292a459173e30d8ea","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/feature_guide.ejs","hash":"752d5c0a4a6f2f2228ae99bb6bede195080a15d8","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/footer.ejs","hash":"a3b14abfce0c71381f5e12ce4c253ac3f74d4694","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/head.ejs","hash":"c4319c24e336495e977c05b7763faa12ae3c467c","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/pagenav.ejs","hash":"87142bbc383a66af90182cc4774048b483a4fd8d","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/menu_drawer.ejs","hash":"28a46dd851b971216c788ace1ca5609d961c2446","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/header.ejs","hash":"426eeb374b409a6ab6eb8e21a7213b6a6147d6f9","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/pagination.ejs","hash":"247c1507971b3e41ed539dd7f8d15af8e21c0d58","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/search.ejs","hash":"1285a8ecb670f6460b31c0fbca9af13b202f5838","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/simple_article.ejs","hash":"fdcbb516a3745d0a70c94e565d53510d9f47693c","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/side_nav.ejs","hash":"b12e72453fb981924d17fa48904af6951f07450f","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/slider.ejs","hash":"9561e783fb6f69ad288582675486f282a29bf2b5","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/tags.ejs","hash":"951f71d7aec12b29fdd0df64e467dc9d2dc67f76","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_widget/blogroll.ejs","hash":"cf42209342e51e1729dcc9b01b1e5497f152844f","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_widget/recent_posts.ejs","hash":"0025878eb4cbf17ddc909f82497e9c73e4091c20","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_widget/tag.ejs","hash":"31b93c078a03af98de504eeb0153f9c0dbc74ed9","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_widget/tagcloud.ejs","hash":"1da338304f94f042606b73e235e9c725628c34ad","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_widget/category.ejs","hash":"fb2d42083c97dfaba2717fb2e63e744259ec4530","modified":1529052606000},{"_id":"themes/raytaylorism/source/weixin_favicon.png","hash":"87a50e79814a1244bcbda7d1a220b66d7323b6df","modified":1529052606000},{"_id":"themes/raytaylorism/source/js/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_base/lib_customize.styl","hash":"3fb10d6e64ff876d7646f518f1f78dd006c4a81f","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_base/layout.styl","hash":"14a747f9fce53f586d11ed67a597a8e71a802d17","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_base/variable.styl","hash":"6812c6940c7c59b9fab5b41e6b832e89416d11c5","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_base/icons.css","hash":"432d08a7e81b70ea16f997227994490c08fbeec8","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/archive.styl","hash":"d912cf297c10e78bd90f3210d596ec87a16f74ad","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/about.styl","hash":"b0f80e89e7518d49190b79985c10c8a7b24bfa19","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/article.styl","hash":"80c102fa7853a9268fdee9dd38c2554550a24a6a","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/comment.styl","hash":"bfa4d7caedffffab18b29f70db9cbf2a15a5f24b","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/footer.styl","hash":"92e1c226202782e5d429fbe72b98ae4e07fc0233","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/header.styl","hash":"534686e8e9de54e8dd99eb1b064f5ad3a0199a4e","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/index.styl","hash":"27918d50e5a69899f184280d9e0048576ac3c85d","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/other.styl","hash":"710eea97e5c98a1426d1a3c0fc8f648279c7a82d","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/side_nav.styl","hash":"5fdde64bdb6bdc07cac264905410fcebbe91e8b7","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/reading.styl","hash":"7abecdfc7fd21f7d11f1568d430418296b34945a","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/link_context.styl","hash":"cd403f732319354781c552d26d37bad7c4450ad5","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/slider.styl","hash":"8933a67e92680dbdfd6af7c2ecaa8d86346df907","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/search.styl","hash":"caef055a95598415656c417e662264397363704b","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/syntax.styl","hash":"20df0f8a54729980094514fc726b51591ada1ad7","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","hash":"683d12731b7429d32ec7de00a6706602e403013f","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/_partial/tablecontents.styl","hash":"974f511091cf9636a8afe11dc9566bdc3dd59805","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","hash":"35e07bd7a4585363060edd558a0e9939e7e68323","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","hash":"d8d73a64d6d5af83a27e6af1d4fedef808955ba0","modified":1529052606000},{"_id":"themes/raytaylorism/source/js/materialize.min.js","hash":"c9308fbe808a149aa11061af40a4be5f391cccee","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/plugin/analytics.ejs","hash":"cab3888ddeaa99b7b7621b38bf7b4a713475e26a","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/plugin/google_code_prettify.ejs","hash":"3aecf1e3e706417131918e3f489557e2d5f438af","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/plugin/main_javascript.ejs","hash":"cc246117386c6cbde13e3b4316ba5e85af659df6","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/plugin/comment.ejs","hash":"eba3487f1599c4b86853dd465cb469fba6cc28c5","modified":1529072876826},{"_id":"themes/raytaylorism/layout/_partial/plugin/noscript.ejs","hash":"abc5087971fb743e16249d2746983e0ccbf74c37","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/plugin/mathjax.ejs","hash":"320729999702dfc605aae56914505094270974b4","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/plugin/reward.ejs","hash":"fde8d42347f72f3b3594c36b1f3c94c6d90a31b6","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/plugin/page_stat.ejs","hash":"25a44cc3f4828efcd0e1c914f25fe9a49bffc253","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/post/category.ejs","hash":"f48f487dc952f5703d9bc7737fc6eb2e6b439608","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/post/prevnext.ejs","hash":"dbb790cf454fda546c82a411a3b50ebb0129a1e8","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/post/gallery.ejs","hash":"0adb673358b42b9ac52b2c1f72b92368cdcf5f2e","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/post/tablecontents.ejs","hash":"2a9ee2d487a7d42d8974c98c9980f01bacee7065","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/post/readtimes.ejs","hash":"56fab931adc45c7d3ef70f7aeaea339148a753aa","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/post/tag.ejs","hash":"36cbf8f85f93be441d47d1a4a0584afd85480d4f","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/post/title.ejs","hash":"c6c44ea53bbfd3838c7bf7cc236c6db1a4b9460e","modified":1529052606000},{"_id":"themes/raytaylorism/layout/_partial/post/time.ejs","hash":"e11498240ece670129a2fbfb2fed16ff315344d4","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","hash":"41d1676b73eec020eaeb9b507dcbcd30069ae8cb","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1529052606000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1529052606000},{"_id":"source/_data/link.json","hash":"75b4a9a9f6b14338a70e878cfcb76b7ac3c59de4","modified":1529052606000},{"_id":"source/_data/hint.json","hash":"783a1ecf85bbd4c59c5c3f5713749020a175b547","modified":1529052606000},{"_id":"source/_data/reading.json","hash":"796f64f4ef44b38504bd88d9b5eec0284d53c15f","modified":1529052606000},{"_id":"source/_data/about.json","hash":"1c6002dbb18207098b8f053695514d693678b448","modified":1529072546796},{"_id":"source/_data/slider.json","hash":"3a4d48a3d29e8f54f29a13ebebe6372c618bd699","modified":1529052606000},{"_id":"source/tags/index.md","hash":"fd6ac6f575d7b239706dea9f6a63a2aa052eb82a","modified":1529052606000},{"_id":"source/saidlist/index.md","hash":"4b4fd46b15b35a196ca73d5a843da34fb20fd5da","modified":1529052606000}],"Category":[{"name":"code","_id":"cjig1il350006j4vlw11wm6zk"},{"name":"备忘","_id":"cjig1il3k000cj4vloiuza5if"}],"Data":[{"_id":"about","data":{"avatar":"http://oh6t6o35a.bkt.clouddn.com/head.png","name":"千寻啊千寻","tag":"JAVA/架构/开发","desc":"QQ：960339491","skills":{"JAVA":8,"Mysql":8,"微服务":9,"分布式":7,"高并发":7,"Node.js":5,"Linux":7,"前端":6},"reward":["http://oh6t6o35a.bkt.clouddn.com/weixinzhifu.jpg","http://oh6t6o35a.bkt.clouddn.com/zhifubaozhifu.jpg"]}},{"_id":"link","data":{"social":{"qq":"tencent://message/?uin=960339491&Site=&Menu=yes","send":"http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=nqeorq2tp6qnr97v77D98fM","gg":"https://gitee.com/qianxunclub","rss":"/atom.xml"},"extern":{"我的码云":"https://gitee.com/qianxunclub","千寻啊千寻":"http://qianxunclub.com/","静觅":"http://cuiqingcai.com/","Ｌunａ":"https://luna.fancylog.net/","Alliot's blog":"https://www.iots.vip/","lilyssh":"https://lilyssh.github.io/","Myths":"https://blog.mythsman.com/"}}},{"_id":"hint","data":{"new":{"selector":[".menu-search"]}}},{"_id":"reading","data":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}},{"_id":"slider","data":[{"image":"http://wailian.work/images/2018/05/22/banner1.jpg","align":"left","title":"博客搬家!","subtitle":"因为ghost博客太蛋疼了，换hexo博客使用，部分文章没有同步过来，可以访问：https://blog.csdn.net/z960339491","link":"https://blog.csdn.net/z960339491"}]}],"Page":[{"_content":"http://192.168.7.153:4002/resume/","source":"resum.md","raw":"http://192.168.7.153:4002/resume/","date":"2018-06-15T12:53:59.859Z","updated":"2018-06-15T12:53:59.859Z","path":"resum.html","title":"","comments":1,"layout":"page","_id":"cjig1il220000j4vl9srlzfep","content":"<p><a href=\"http://192.168.7.153:4002/resume/\" target=\"_blank\" rel=\"noopener\">http://192.168.7.153:4002/resume/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://192.168.7.153:4002/resume/\" target=\"_blank\" rel=\"noopener\">http://192.168.7.153:4002/resume/</a></p>\n"},{"_content":"ayout：page。 Create folders inlcudingindex.mdinsourcefolder to add pages, and add alayout: pageinfront-matterofindex.md`.","source":"index.md","raw":"ayout：page。 Create folders inlcudingindex.mdinsourcefolder to add pages, and add alayout: pageinfront-matterofindex.md`.","date":"2018-06-14T12:31:40.920Z","updated":"2018-06-14T12:31:40.920Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"cjig1il260001j4vlws15clxz","content":"<p>ayout：page。 Create folders inlcudingindex.mdinsourcefolder to add pages, and add alayout: pageinfront-matterofindex.md`.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ayout：page。 Create folders inlcudingindex.mdinsourcefolder to add pages, and add alayout: pageinfront-matterofindex.md`.</p>\n"},{"title":"resume","date":"2018-06-15T06:27:33.000Z","layout":"empty","categories":"code","_content":"wdrewfewfw","source":"resume/index.md","raw":"---\ntitle: resume\ndate: 2018-06-15 14:27:33\nlayout: empty\ncategories: code\n---\nwdrewfewfw","updated":"2018-06-15T14:07:48.445Z","path":"resume/index.html","_id":"cjig1il2y0003j4vlhkcmdd21","comments":1,"content":"<p>wdrewfewfw</p>\n","site":{"data":{}},"excerpt":"","more":"<p>wdrewfewfw</p>\n"},{"title":"about","date":"2018-06-14T05:48:04.000Z","layout":"about","_content":"dsdsa","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-06-14 13:48:04\nlayout: about\n---\ndsdsa","updated":"2018-06-15T14:20:49.399Z","path":"about/index.html","_id":"cjig1il320005j4vl11wwh7dg","comments":1,"content":"<p>dsdsa</p>\n","site":{"data":{}},"excerpt":"","more":"<p>dsdsa</p>\n"},{"_content":"asdfasdfax是的发生的发生多烦啊","source":"resume/resume.md","raw":"asdfasdfax是的发生的发生多烦啊","date":"2018-06-15T12:53:59.862Z","updated":"2018-06-15T12:53:59.862Z","path":"resume/resume.html","title":"","comments":1,"layout":"page","_id":"cjig1il3n000ej4vlfkantqj3","content":"<p>asdfasdfax是的发生的发生多烦啊</p>\n","site":{"data":{}},"excerpt":"","more":"<p>asdfasdfax是的发生的发生多烦啊</p>\n"},{"title":"标签云","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签云\nlayout: tags\n---","date":"2018-06-15T14:15:44.318Z","updated":"2018-06-15T08:50:06.000Z","path":"tags/index.html","comments":1,"_id":"cjig2tl1g0000gwvlr6lcvyho","content":"","site":{"data":{"about":{"avatar":"http://oh6t6o35a.bkt.clouddn.com/head.png","name":"千寻啊千寻","tag":"JAVA/架构/开发","desc":"QQ：960339491","skills":{"JAVA":8,"Mysql":8,"微服务":9,"分布式":7,"高并发":7,"Node.js":5,"Linux":7,"前端":6},"reward":["http://oh6t6o35a.bkt.clouddn.com/weixinzhifu.jpg","http://oh6t6o35a.bkt.clouddn.com/zhifubaozhifu.jpg"]},"link":{"social":{"qq":"tencent://message/?uin=960339491&Site=&Menu=yes","send":"http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=nqeorq2tp6qnr97v77D98fM","gg":"https://gitee.com/qianxunclub","rss":"/atom.xml"},"extern":{"我的码云":"https://gitee.com/qianxunclub","千寻啊千寻":"http://qianxunclub.com/","静觅":"http://cuiqingcai.com/","Ｌunａ":"https://luna.fancylog.net/","Alliot's blog":"https://www.iots.vip/","lilyssh":"https://lilyssh.github.io/","Myths":"https://blog.mythsman.com/"}},"hint":{"new":{"selector":[".menu-search"]}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}},"slider":[{"image":"http://wailian.work/images/2018/05/22/banner1.jpg","align":"left","title":"博客搬家!","subtitle":"因为ghost博客太蛋疼了，换hexo博客使用，部分文章没有同步过来，可以访问：https://blog.csdn.net/z960339491","link":"https://blog.csdn.net/z960339491"}]}},"excerpt":"","more":""},{"title":"留言板","layout":"default","sid":"ceab7890-a9b0-48db-aad2-b4e48208951a","_content":"**博客**  \n\n使用程序：Hexo  \n云存储提供：[七牛云](http://www.qiniu.com/)  \n\n**友情链接**  \n\n昵称：千寻啊千寻  \n网站：qianxunclub.com  \n描述：编程技术分享  \nLOGO：\n```http://ofbphtmkb.bkt.clouddn.com/qianxun/4/3e/c20fa0d6431df54956f1b8db7d281.jpg```  \n\n欢迎各位添加友情连接哇，有什么建议可以给我留言哦~","source":"saidlist/index.md","raw":"---\ntitle: 留言板\nlayout: default\nsid: ceab7890-a9b0-48db-aad2-b4e48208951a\n---\n**博客**  \n\n使用程序：Hexo  \n云存储提供：[七牛云](http://www.qiniu.com/)  \n\n**友情链接**  \n\n昵称：千寻啊千寻  \n网站：qianxunclub.com  \n描述：编程技术分享  \nLOGO：\n```http://ofbphtmkb.bkt.clouddn.com/qianxun/4/3e/c20fa0d6431df54956f1b8db7d281.jpg```  \n\n欢迎各位添加友情连接哇，有什么建议可以给我留言哦~","date":"2018-06-15T14:15:44.306Z","updated":"2018-06-15T08:50:06.000Z","path":"saidlist/index.html","comments":1,"_id":"cjig2tl1r0001gwvlmzfxvlno","content":"<p><strong>博客</strong>  </p>\n<p>使用程序：Hexo<br>云存储提供：<a href=\"http://www.qiniu.com/\" target=\"_blank\" rel=\"noopener\">七牛云</a>  </p>\n<p><strong>友情链接</strong>  </p>\n<p>昵称：千寻啊千寻<br>网站：qianxunclub.com<br>描述：编程技术分享<br>LOGO：<br><code>http://ofbphtmkb.bkt.clouddn.com/qianxun/4/3e/c20fa0d6431df54956f1b8db7d281.jpg</code>  </p>\n<p>欢迎各位添加友情连接哇，有什么建议可以给我留言哦~</p>\n","site":{"data":{"about":{"avatar":"http://oh6t6o35a.bkt.clouddn.com/head.png","name":"千寻啊千寻","tag":"JAVA/架构/开发","desc":"QQ：960339491","skills":{"JAVA":8,"Mysql":8,"微服务":9,"分布式":7,"高并发":7,"Node.js":5,"Linux":7,"前端":6},"reward":["http://oh6t6o35a.bkt.clouddn.com/weixinzhifu.jpg","http://oh6t6o35a.bkt.clouddn.com/zhifubaozhifu.jpg"]},"link":{"social":{"qq":"tencent://message/?uin=960339491&Site=&Menu=yes","send":"http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=nqeorq2tp6qnr97v77D98fM","gg":"https://gitee.com/qianxunclub","rss":"/atom.xml"},"extern":{"我的码云":"https://gitee.com/qianxunclub","千寻啊千寻":"http://qianxunclub.com/","静觅":"http://cuiqingcai.com/","Ｌunａ":"https://luna.fancylog.net/","Alliot's blog":"https://www.iots.vip/","lilyssh":"https://lilyssh.github.io/","Myths":"https://blog.mythsman.com/"}},"hint":{"new":{"selector":[".menu-search"]}},"reading":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}},"slider":[{"image":"http://wailian.work/images/2018/05/22/banner1.jpg","align":"left","title":"博客搬家!","subtitle":"因为ghost博客太蛋疼了，换hexo博客使用，部分文章没有同步过来，可以访问：https://blog.csdn.net/z960339491","link":"https://blog.csdn.net/z960339491"}]}},"excerpt":"","more":"<p><strong>博客</strong>  </p>\n<p>使用程序：Hexo<br>云存储提供：<a href=\"http://www.qiniu.com/\" target=\"_blank\" rel=\"noopener\">七牛云</a>  </p>\n<p><strong>友情链接</strong>  </p>\n<p>昵称：千寻啊千寻<br>网站：qianxunclub.com<br>描述：编程技术分享<br>LOGO：<br><code>http://ofbphtmkb.bkt.clouddn.com/qianxun/4/3e/c20fa0d6431df54956f1b8db7d281.jpg</code>  </p>\n<p>欢迎各位添加友情连接哇，有什么建议可以给我留言哦~</p>\n"}],"Post":[{"title":"JsonUtil工具类","date":"2017-01-07T15:55:44.000Z","updated":"2018-06-15T13:49:38.050Z","_content":"基于jackson的json和object相互转换的工具类。\n\n```\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.util.CollectionUtils;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n* 基于jackson的json和object相互转换的工具类\n* @author \n* @date 2017年6月21日 上午10:00:23\n*/\npublic final class JsonUtil {\n    /** 私有构造 单例 */\n    private JsonUtil(){\n        \n    }\n    \n    private static ObjectMapper objectMapper = null;\n    \n    static\n    {\n        // 将objectMapper 设置为全局静态缓存，提高调用效率\n        objectMapper = new ObjectMapper();\n        objectMapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n    \n    /** 供外部调用 ObjectMapper */\n    public static ObjectMapper getObjectMapper()\n    {\n        return objectMapper;\n    }\n    \n    /**\n     * json串转对象\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return\n     */\n    public static <T> T json2obj(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        T t = null;\n\n        try\n        {\n            t = objectMapper.readValue(jsonStr, clazz);\n        }\n        catch (IOException e)\n        {\n\n        }\n        return t;\n    }\n    \n    /**\n     * json串转map对象,前提是被转换的json串value为多组k-v\n     * {\"zhangjiajie\":{\"price\":\"fixed\",\"type\":\"mountain\"},\"jiuzhaigou\":{\"price\":\"fixed\",\"type\":\"mountain\"}}\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return Map\n     */\n    public static <T> Map<String, T> json2map(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        Map<String, Map<String, Object>> map = null;\n        try\n        {\n            map = objectMapper.readValue(jsonStr,\n                    new TypeReference<Map<String, T>>()\n                    {\n                    });\n        }\n        catch (IOException e)\n        {\n\n        }\n\n        if (CollectionUtils.isEmpty(map))\n        {\n            return null;\n        }\n\n        Map<String, T> result = new HashMap<String, T>();\n        for (Entry<String, Map<String, Object>> entry : map.entrySet())\n        {\n            result.put(entry.getKey(), map2pojo(entry.getValue(), clazz));\n        }\n        return result;\n    }\n    \n    /**\n     * json转list对象\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return List\n     */\n    public static <T> List<T> json2list(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        List<Map<String, Object>> list = null;\n        try\n        {\n            list = objectMapper.readValue(jsonStr,\n                    new TypeReference<List<T>>()\n                    {\n                    });\n        }\n        catch (IOException e)\n        {\n        }\n\n        // 非空校验\n        if (CollectionUtils.isEmpty(list))\n        {\n            return null;\n        }\n\n        List<T> result = new ArrayList<T>();\n        for (Map<String, Object> map : list)\n        {\n            result.add(map2pojo(map, clazz));\n        }\n        return result;\n    }\n    \n    /**\n     * 获取json串的某个键对应的值\n     * @Description\n     * @param jsonSrc\n     * @param jsonKey\n     * @return\n     */\n    public static String getJsonValue(String jsonSrc, String jsonKey)\n    {\n        if (StringUtils.isEmpty(jsonSrc) || StringUtils.isEmpty(jsonKey))\n        {\n            return null;\n        }\n        JsonNode node = json2obj(jsonSrc, JsonNode.class);\n        \n        if(node == null)\n        {\n            return null;\n        }\n\n        // 获取jsonKey数据\n        JsonNode dataNode = node.get(jsonKey);\n\n        if (null == dataNode)\n        {\n            return null;\n        }\n\n        return dataNode.toString();\n    }\n    \n    /**\n     * 对象转json串,维持基本类型,空值返回null\n\n     * 示例\n\n     * {\"name\":\"alex\",\"age\":20,\"address\":null,\"score\":[{\"subject\":\"math\",\"score\":98},{\"subject\":\"art\",\"score\":50}]}\n     * @Description\n     * @param obj\n     * @return\n     */\n    public static String obj2json(Object obj)\n    {\n        if (obj == null)\n        {\n            return null;\n        }\n        String jsonResult = null;\n        try\n        {\n            jsonResult = objectMapper.writeValueAsString(obj);\n        }\n        catch (JsonProcessingException e)\n        {\n    \n        }\n    \n        return jsonResult;\n    }\n\n    /**\n     * 一般对象转JsonNode\n     * @Description\n     * @param obj\n     * @return\n     */\n    public static JsonNode obj2node(Object obj)\n    {\n        if (null == obj)\n        {\n            return null;\n        }\n\n        JsonNode node = null;\n\n        try\n        {\n            node = objectMapper.readTree(obj2json(obj));\n        }\n        catch (IOException e)\n        {\n        }\n\n        return node;\n    }\n    \n    public static <T> T obj2T(Object obj, Class<T> clazz)\n    {\n        if (null == obj)\n        {\n            return null;\n        }\n\n        T t = null;\n\n        try\n        {\n            t = objectMapper.readValue(obj2json(obj), clazz);\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n\n        return t;\n    }\n    \n    /**\n     * map convert to javaBean\n     */\n    private static <T> T map2pojo(@SuppressWarnings(\"rawtypes\")Map map, Class<T> clazz)\n    {\n        return objectMapper.convertValue(map, clazz);\n    }\n    \n}\n\n\n```","source":"_posts/jsonUtil.md","raw":"---\ntitle: JsonUtil工具类\ndate: 2017-01-07 23:55:44\nupdated: \ncategories: code\npermalink:\ntags: [jsonUtil,工具类]\n---\n基于jackson的json和object相互转换的工具类。\n\n```\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.util.CollectionUtils;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n* 基于jackson的json和object相互转换的工具类\n* @author \n* @date 2017年6月21日 上午10:00:23\n*/\npublic final class JsonUtil {\n    /** 私有构造 单例 */\n    private JsonUtil(){\n        \n    }\n    \n    private static ObjectMapper objectMapper = null;\n    \n    static\n    {\n        // 将objectMapper 设置为全局静态缓存，提高调用效率\n        objectMapper = new ObjectMapper();\n        objectMapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n    \n    /** 供外部调用 ObjectMapper */\n    public static ObjectMapper getObjectMapper()\n    {\n        return objectMapper;\n    }\n    \n    /**\n     * json串转对象\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return\n     */\n    public static <T> T json2obj(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        T t = null;\n\n        try\n        {\n            t = objectMapper.readValue(jsonStr, clazz);\n        }\n        catch (IOException e)\n        {\n\n        }\n        return t;\n    }\n    \n    /**\n     * json串转map对象,前提是被转换的json串value为多组k-v\n     * {\"zhangjiajie\":{\"price\":\"fixed\",\"type\":\"mountain\"},\"jiuzhaigou\":{\"price\":\"fixed\",\"type\":\"mountain\"}}\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return Map\n     */\n    public static <T> Map<String, T> json2map(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        Map<String, Map<String, Object>> map = null;\n        try\n        {\n            map = objectMapper.readValue(jsonStr,\n                    new TypeReference<Map<String, T>>()\n                    {\n                    });\n        }\n        catch (IOException e)\n        {\n\n        }\n\n        if (CollectionUtils.isEmpty(map))\n        {\n            return null;\n        }\n\n        Map<String, T> result = new HashMap<String, T>();\n        for (Entry<String, Map<String, Object>> entry : map.entrySet())\n        {\n            result.put(entry.getKey(), map2pojo(entry.getValue(), clazz));\n        }\n        return result;\n    }\n    \n    /**\n     * json转list对象\n     * @Description\n     * @param jsonStr\n     * @param clazz\n     * @return List\n     */\n    public static <T> List<T> json2list(String jsonStr, Class<T> clazz)\n    {\n        if (StringUtils.isEmpty(jsonStr))\n        {\n            return null;\n        }\n\n        List<Map<String, Object>> list = null;\n        try\n        {\n            list = objectMapper.readValue(jsonStr,\n                    new TypeReference<List<T>>()\n                    {\n                    });\n        }\n        catch (IOException e)\n        {\n        }\n\n        // 非空校验\n        if (CollectionUtils.isEmpty(list))\n        {\n            return null;\n        }\n\n        List<T> result = new ArrayList<T>();\n        for (Map<String, Object> map : list)\n        {\n            result.add(map2pojo(map, clazz));\n        }\n        return result;\n    }\n    \n    /**\n     * 获取json串的某个键对应的值\n     * @Description\n     * @param jsonSrc\n     * @param jsonKey\n     * @return\n     */\n    public static String getJsonValue(String jsonSrc, String jsonKey)\n    {\n        if (StringUtils.isEmpty(jsonSrc) || StringUtils.isEmpty(jsonKey))\n        {\n            return null;\n        }\n        JsonNode node = json2obj(jsonSrc, JsonNode.class);\n        \n        if(node == null)\n        {\n            return null;\n        }\n\n        // 获取jsonKey数据\n        JsonNode dataNode = node.get(jsonKey);\n\n        if (null == dataNode)\n        {\n            return null;\n        }\n\n        return dataNode.toString();\n    }\n    \n    /**\n     * 对象转json串,维持基本类型,空值返回null\n\n     * 示例\n\n     * {\"name\":\"alex\",\"age\":20,\"address\":null,\"score\":[{\"subject\":\"math\",\"score\":98},{\"subject\":\"art\",\"score\":50}]}\n     * @Description\n     * @param obj\n     * @return\n     */\n    public static String obj2json(Object obj)\n    {\n        if (obj == null)\n        {\n            return null;\n        }\n        String jsonResult = null;\n        try\n        {\n            jsonResult = objectMapper.writeValueAsString(obj);\n        }\n        catch (JsonProcessingException e)\n        {\n    \n        }\n    \n        return jsonResult;\n    }\n\n    /**\n     * 一般对象转JsonNode\n     * @Description\n     * @param obj\n     * @return\n     */\n    public static JsonNode obj2node(Object obj)\n    {\n        if (null == obj)\n        {\n            return null;\n        }\n\n        JsonNode node = null;\n\n        try\n        {\n            node = objectMapper.readTree(obj2json(obj));\n        }\n        catch (IOException e)\n        {\n        }\n\n        return node;\n    }\n    \n    public static <T> T obj2T(Object obj, Class<T> clazz)\n    {\n        if (null == obj)\n        {\n            return null;\n        }\n\n        T t = null;\n\n        try\n        {\n            t = objectMapper.readValue(obj2json(obj), clazz);\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n\n        return t;\n    }\n    \n    /**\n     * map convert to javaBean\n     */\n    private static <T> T map2pojo(@SuppressWarnings(\"rawtypes\")Map map, Class<T> clazz)\n    {\n        return objectMapper.convertValue(map, clazz);\n    }\n    \n}\n\n\n```","slug":"jsonUtil","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjig1il2v0002j4vleeio5ckm","content":"<p>基于jackson的json和object相互转换的工具类。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"built_in\">List</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"built_in\">Map</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"built_in\">Map</span>.Entry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.CollectionUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.JsonNode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">* </span>基于jackson的json和object相互转换的工具类</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">* </span>@author </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">* </span>@date 2017年6月21日 上午10:00:23</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">*/</span></span></span><br><span class=\"line\">public <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/<span class=\"emphasis\">** 私有构造 单例 *</span>/</span></span></span><br><span class=\"line\">    private JsonUtil()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private <span class=\"keyword\">static</span> ObjectMapper objectMapper = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将objectMapper 设置为全局静态缓存，提高调用效率</span></span><br><span class=\"line\">        objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        objectMapper.setDateFormat(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/<span class=\"emphasis\">** 供外部调用 ObjectMapper *</span>/</span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> ObjectMapper getObjectMapper()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectMapper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * json串转对象</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param jsonStr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param clazz</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> &lt;T&gt; T json2obj(<span class=\"built_in\">String</span> jsonStr, Class&lt;T&gt; clazz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(jsonStr))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        T t = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t = objectMapper.readValue(jsonStr, clazz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * json串转map对象,前提是被转换的json串value为多组k-v</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * &#123;\"zhangjiajie\":&#123;\"price\":\"fixed\",\"type\":\"mountain\"&#125;,\"jiuzhaigou\":&#123;\"price\":\"fixed\",\"type\":\"mountain\"&#125;&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param jsonStr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param clazz</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return Map</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, T&gt; json2map(<span class=\"built_in\">String</span> jsonStr, Class&lt;T&gt; clazz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(jsonStr))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt;&gt; map = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            map = objectMapper.readValue(jsonStr,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> TypeReference&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, T&gt;&gt;()</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(map))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, T&gt; result = <span class=\"keyword\">new</span> HashMap&lt;<span class=\"built_in\">String</span>, T&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Entry&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt;&gt; entry : map.entrySet())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result.put(entry.getKey(), map2pojo(entry.getValue(), clazz));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * json转list对象</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param jsonStr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param clazz</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return List</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"built_in\">List</span>&lt;T&gt; json2list(<span class=\"built_in\">String</span> jsonStr, Class&lt;T&gt; clazz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(jsonStr))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt;&gt; list = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            list = objectMapper.readValue(jsonStr,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> TypeReference&lt;<span class=\"built_in\">List</span>&lt;T&gt;&gt;()</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 非空校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(list))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">List</span>&lt;T&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; map : list)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result.add(map2pojo(map, clazz));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * 获取json串的某个键对应的值</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param jsonSrc</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param jsonKey</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> getJsonValue(<span class=\"built_in\">String</span> jsonSrc, <span class=\"built_in\">String</span> jsonKey)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(jsonSrc) || StringUtils.isEmpty(jsonKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        JsonNode node = json2obj(jsonSrc, JsonNode.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取jsonKey数据</span></span><br><span class=\"line\">        JsonNode dataNode = node.<span class=\"keyword\">get</span>(jsonKey);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == dataNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataNode.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * 对象转json串,维持基本类型,空值返回null</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * 示例</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * &#123;\"name\":\"alex\",\"age\":20,\"address\":null,\"score\":[&#123;\"subject\":\"math\",\"score\":98&#125;,&#123;\"subject\":\"art\",\"score\":50&#125;]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param obj</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> obj2json(<span class=\"built_in\">Object</span> obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> jsonResult = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            jsonResult = objectMapper.writeValueAsString(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (JsonProcessingException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * 一般对象转JsonNode</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param obj</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> JsonNode obj2node(<span class=\"built_in\">Object</span> obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == obj)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        JsonNode node = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            node = objectMapper.readTree(obj2json(obj));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public <span class=\"keyword\">static</span> &lt;T&gt; T obj2T(<span class=\"built_in\">Object</span> obj, Class&lt;T&gt; clazz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == obj)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        T t = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t = objectMapper.readValue(obj2json(obj), clazz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * map convert to javaBean</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> &lt;T&gt; T map2pojo(<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"rawtypes\"</span>)<span class=\"built_in\">Map</span> map, Class&lt;T&gt; clazz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectMapper.convertValue(map, clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>基于jackson的json和object相互转换的工具类。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"built_in\">List</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"built_in\">Map</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"built_in\">Map</span>.Entry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.CollectionUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.JsonNode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">* </span>基于jackson的json和object相互转换的工具类</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">* </span>@author </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\">* </span>@date 2017年6月21日 上午10:00:23</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">*/</span></span></span><br><span class=\"line\">public <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/<span class=\"emphasis\">** 私有构造 单例 *</span>/</span></span></span><br><span class=\"line\">    private JsonUtil()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private <span class=\"keyword\">static</span> ObjectMapper objectMapper = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将objectMapper 设置为全局静态缓存，提高调用效率</span></span><br><span class=\"line\">        objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        objectMapper.setDateFormat(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/<span class=\"emphasis\">** 供外部调用 ObjectMapper *</span>/</span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> ObjectMapper getObjectMapper()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectMapper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * json串转对象</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param jsonStr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param clazz</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> &lt;T&gt; T json2obj(<span class=\"built_in\">String</span> jsonStr, Class&lt;T&gt; clazz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(jsonStr))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        T t = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t = objectMapper.readValue(jsonStr, clazz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * json串转map对象,前提是被转换的json串value为多组k-v</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * &#123;\"zhangjiajie\":&#123;\"price\":\"fixed\",\"type\":\"mountain\"&#125;,\"jiuzhaigou\":&#123;\"price\":\"fixed\",\"type\":\"mountain\"&#125;&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param jsonStr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param clazz</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return Map</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, T&gt; json2map(<span class=\"built_in\">String</span> jsonStr, Class&lt;T&gt; clazz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(jsonStr))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt;&gt; map = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            map = objectMapper.readValue(jsonStr,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> TypeReference&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, T&gt;&gt;()</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(map))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, T&gt; result = <span class=\"keyword\">new</span> HashMap&lt;<span class=\"built_in\">String</span>, T&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Entry&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt;&gt; entry : map.entrySet())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result.put(entry.getKey(), map2pojo(entry.getValue(), clazz));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * json转list对象</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param jsonStr</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param clazz</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return List</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"built_in\">List</span>&lt;T&gt; json2list(<span class=\"built_in\">String</span> jsonStr, Class&lt;T&gt; clazz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(jsonStr))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt;&gt; list = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            list = objectMapper.readValue(jsonStr,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> TypeReference&lt;<span class=\"built_in\">List</span>&lt;T&gt;&gt;()</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 非空校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(list))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">List</span>&lt;T&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; map : list)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result.add(map2pojo(map, clazz));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * 获取json串的某个键对应的值</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param jsonSrc</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param jsonKey</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> getJsonValue(<span class=\"built_in\">String</span> jsonSrc, <span class=\"built_in\">String</span> jsonKey)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(jsonSrc) || StringUtils.isEmpty(jsonKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        JsonNode node = json2obj(jsonSrc, JsonNode.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取jsonKey数据</span></span><br><span class=\"line\">        JsonNode dataNode = node.<span class=\"keyword\">get</span>(jsonKey);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == dataNode)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataNode.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * 对象转json串,维持基本类型,空值返回null</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * 示例</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * &#123;\"name\":\"alex\",\"age\":20,\"address\":null,\"score\":[&#123;\"subject\":\"math\",\"score\":98&#125;,&#123;\"subject\":\"art\",\"score\":50&#125;]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param obj</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"built_in\">String</span> obj2json(<span class=\"built_in\">Object</span> obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> jsonResult = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            jsonResult = objectMapper.writeValueAsString(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (JsonProcessingException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * 一般对象转JsonNode</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @Description</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @param obj</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * @return</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    public <span class=\"keyword\">static</span> JsonNode obj2node(<span class=\"built_in\">Object</span> obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == obj)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        JsonNode node = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            node = objectMapper.readTree(obj2json(obj));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public <span class=\"keyword\">static</span> &lt;T&gt; T obj2T(<span class=\"built_in\">Object</span> obj, Class&lt;T&gt; clazz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == obj)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        T t = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t = objectMapper.readValue(obj2json(obj), clazz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     * map convert to javaBean</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"code\">     */</span></span></span></span><br><span class=\"line\">    private <span class=\"keyword\">static</span> &lt;T&gt; T map2pojo(<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"rawtypes\"</span>)<span class=\"built_in\">Map</span> map, Class&lt;T&gt; clazz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectMapper.convertValue(map, clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"常见异常","date":"2017-01-07T14:55:44.000Z","updated":"2018-06-15T13:49:52.185Z","_content":"\n## 1、spring boot启动报异常 ##\n```\nException in thread \"main\" java.lang.UnsupportedClassVersionError: \norg/springframework/boot/loader/JarLauncher : Unsupported major.minor version 52.0\n```\n解决办法：\n1. 换成jdk1.8<br>\n2. pom.xml添加:<br>\n```\n<plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n</plugin>\n```\n### 2、解决svn的working copy locked并且cleanup恢复不能的情况 ###\n![](http://yetongxue.github.io/photos/20180615111444.png)","source":"_posts/FAQ.md","raw":"---\ntitle: 常见异常\ndate: 2017-01-07 22:55:44\nupdated: \ncategories: 备忘\npermalink:\ntags: 常见异常\n---\n\n## 1、spring boot启动报异常 ##\n```\nException in thread \"main\" java.lang.UnsupportedClassVersionError: \norg/springframework/boot/loader/JarLauncher : Unsupported major.minor version 52.0\n```\n解决办法：\n1. 换成jdk1.8<br>\n2. pom.xml添加:<br>\n```\n<plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n</plugin>\n```\n### 2、解决svn的working copy locked并且cleanup恢复不能的情况 ###\n![](http://yetongxue.github.io/photos/20180615111444.png)","slug":"FAQ","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjig1il300004j4vlcfw0qsbh","content":"<h2 id=\"1、spring-boot启动报异常\"><a href=\"#1、spring-boot启动报异常\" class=\"headerlink\" title=\"1、spring boot启动报异常\"></a>1、spring boot启动报异常</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"main\"</span> java<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.UnsupportedClassVersionError</span>: </span><br><span class=\"line\">org/springframework/boot/loader/JarLauncher : Unsupported major<span class=\"selector-class\">.minor</span> version <span class=\"number\">52.0</span></span><br></pre></td></tr></table></figure>\n<p>解决办法：</p>\n<ol>\n<li>换成jdk1.8<br></li>\n<li>pom.xml添加:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2、解决svn的working-copy-locked并且cleanup恢复不能的情况\"><a href=\"#2、解决svn的working-copy-locked并且cleanup恢复不能的情况\" class=\"headerlink\" title=\"2、解决svn的working copy locked并且cleanup恢复不能的情况\"></a>2、解决svn的working copy locked并且cleanup恢复不能的情况</h3><p><img src=\"http://yetongxue.github.io/photos/20180615111444.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、spring-boot启动报异常\"><a href=\"#1、spring-boot启动报异常\" class=\"headerlink\" title=\"1、spring boot启动报异常\"></a>1、spring boot启动报异常</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"main\"</span> java<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.UnsupportedClassVersionError</span>: </span><br><span class=\"line\">org/springframework/boot/loader/JarLauncher : Unsupported major<span class=\"selector-class\">.minor</span> version <span class=\"number\">52.0</span></span><br></pre></td></tr></table></figure>\n<p>解决办法：</p>\n<ol>\n<li>换成jdk1.8<br></li>\n<li>pom.xml添加:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2、解决svn的working-copy-locked并且cleanup恢复不能的情况\"><a href=\"#2、解决svn的working-copy-locked并且cleanup恢复不能的情况\" class=\"headerlink\" title=\"2、解决svn的working copy locked并且cleanup恢复不能的情况\"></a>2、解决svn的working copy locked并且cleanup恢复不能的情况</h3><p><img src=\"http://yetongxue.github.io/photos/20180615111444.png\" alt=\"\"></p>\n"},{"title":"签名用的工具箱","date":"2017-01-07T14:55:44.000Z","updated":"2018-06-15T13:49:41.672Z","_content":"签名算法工具，签名生成的步骤如下：\n 第一步，设所有发送或者接收到的数据为集合M，将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串stringA。\n\n 第二步，在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。\n\n特别注意以下重要规则：</br>\n\t◆ 参数名ASCII码从小到大排序（字典序）；</br>\n\t◆ 如果参数的值为空不参与签名；</br>\n\t◆ 参数名区分大小写；</br>\n\t◆ 验证调用返回或主动通知签名时，传送的sign参数不参与签名，将生成的签名与该sign值作校验。</br>\n\t◆ key值由互金端提供；</br>\n\n```\n\timport java.io.StringReader;\n\timport java.net.URLEncoder;\n\timport java.util.ArrayList;\n\timport java.util.Collections;\n\timport java.util.HashMap;\n\timport java.util.List;\n\timport java.util.Map;\n\timport java.util.SortedMap;\n\timport java.util.TreeMap;\n\t\n\timport org.dom4j.Document;\n\timport org.dom4j.DocumentException;\n\timport org.dom4j.Element;\n\timport org.dom4j.io.SAXReader;\n\timport org.xml.sax.InputSource;\n\t/**\n\t* ClassName:SignUtils</br>\n\t* Function: 签名用的工具箱</br>\n\t* Date:     2017-2-27 下午3:22:33 </br>\n\t* <功能详细描述>签名算法</br>\n\t* @author    \n\t*/\n\n\tpublic class SignUtils {\n\t    public static void main(String[] args) {\n\t        String key = \"CvRu8Dydbe7SETJoqh5wQYBp4PnZxigz\";\n\t        SortedMap<String,String> params = new TreeMap<String,String>();\n\t        params.put(\"orderId\", \"1112233\");\n\t        params.put(\"merchantId\", \"3700603014\");\n\t        params.put(\"applyAmount\", \"1000000\");\n\t        params.put(\"sign\", \"sdfsdf\");\n\t        String sign = getSign(params,key);//签名\n\t        System.out.println(\"sign:\"+sign.toUpperCase());\n\t        params.put(\"sign\", sign.toUpperCase());\n\t        System.out.println(\"sign:\"+checkParam(params,key));//验证\n\t    }\n\t    /** <一句话功能简述>\n\t     * <功能详细描述>验证返回参数\n\t     * @param params\n\t     * @param key\n\t     * @return\n\t     * @see [类、类#方法、类#成员]\n\t     */\n\t    public static boolean checkParam(Map<String,String> params,String key){\n\t        boolean result = false;\n\t        if(params.containsKey(\"sign\")){\n\t            String sign = params.get(\"sign\");\n\t            params.remove(\"sign\");\n\t            params = paraFilter(params);\n\t            StringBuilder buf = new StringBuilder((params.size() +1) * 10);\n\t            SignUtils.buildPayParams(buf,params,false);\n\t            String preStr = buf.toString();\n\t            String signRecieve = MD5.sign(preStr, \"&key=\" + key, \"utf-8\");\n\t            System.out.println(signRecieve);\n\t            result = sign.equalsIgnoreCase(signRecieve);\n\t        }\n\t        return result;\n\t    }\n\t    \n\t    /**\n\t     * 获取签名\n\t     * @param map 对象\n\t     * @param key 密匙\n\t     * @return 签名\n\t     */\n\t    public static String getSign(SortedMap<String,String> map,String key){\n\t        Map<String, String> params = SignUtils.paraFilter(map);\n\t        StringBuilder buf = new StringBuilder((params.size() + 1) * 10);\n\t        SignUtils.buildPayParams(buf, params, false);\n\t        String preStr = buf.toString();\n\t        System.out.println(preStr);\n\t        String sign = MD5.sign(preStr, \"&key=\" + key, \"utf-8\").toUpperCase();\n\t        return sign;\n\t    }\n\t    \n\t    /**\n\t     * 过滤参数:过滤掉sArray中value为空和key为sign的键值对\n\t     * @param sArray\n\t     * @return\n\t     */\n\t\n\t    public static Map<String, String> paraFilter(Map<String, String> sArray) {\n\t        Map<String, String> result = new HashMap<String, String>(sArray.size());\n\t        if (sArray == null || sArray.size() <= 0) {\n\t            return result;\n\t        }\n\t        for (String key : sArray.keySet()) {\n\t            String value = sArray.get(key);\n\t            if (value == null || value.equals(\"\") || key.equalsIgnoreCase(\"sign\")) {\n\t                continue;\n\t            }\n\t            result.put(key, value);\n\t        }\n\t        return result;\n\t    }\n\t    \n\t\n\t   /**\n\t    * 将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串stringA\n\t    * @param sb 返回的字符串\n\t    * @param payParams  集合M\n\t    * @param encoding 是否需要经过UTF-8编码：true-需要  false-不需要\n\t    */\n\t\n\t    public static void buildPayParams(StringBuilder sb,Map<String, String> payParams,boolean encoding){\n\t        List<String> keys = new ArrayList<String>(payParams.keySet());\n\t        Collections.sort(keys);\n\t        for(String key : keys){\n\t            sb.append(key).append(\"=\");\n\t            if(encoding){\n\t                sb.append(urlEncode(payParams.get(key)));\n\t            }else{\n\t                sb.append(payParams.get(key));\n\t            }\n\t            sb.append(\"&\");\n\t        }\n\t        sb.setLength(sb.length() - 1);\n\t    }\n\t    \n\t    public static String urlEncode(String str){\n\t        try {\n\t            return URLEncoder.encode(str, \"UTF-8\");\n\t        } catch (Throwable e) {\n\t            return str;\n\t        }\n\t    }\n\t    \n\t    \n\t    public static Element readerXml(String body,String encode) throws DocumentException {\n\t        SAXReader reader = new SAXReader(false);\n\t        InputSource source = new InputSource(new StringReader(body));\n\t        source.setEncoding(encode);\n\t        Document doc = reader.read(source);\n\t        Element element = doc.getRootElement();\n\t        return element;\n\t    }\n\t\n\t}\n```\n","source":"_posts/signUtil.md","raw":"---\ntitle: 签名用的工具箱\ndate: 2017-01-07 22:55:44\nupdated: \ncategories: code\npermalink:\ntags: [签名,工具类]\n---\n签名算法工具，签名生成的步骤如下：\n 第一步，设所有发送或者接收到的数据为集合M，将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串stringA。\n\n 第二步，在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。\n\n特别注意以下重要规则：</br>\n\t◆ 参数名ASCII码从小到大排序（字典序）；</br>\n\t◆ 如果参数的值为空不参与签名；</br>\n\t◆ 参数名区分大小写；</br>\n\t◆ 验证调用返回或主动通知签名时，传送的sign参数不参与签名，将生成的签名与该sign值作校验。</br>\n\t◆ key值由互金端提供；</br>\n\n```\n\timport java.io.StringReader;\n\timport java.net.URLEncoder;\n\timport java.util.ArrayList;\n\timport java.util.Collections;\n\timport java.util.HashMap;\n\timport java.util.List;\n\timport java.util.Map;\n\timport java.util.SortedMap;\n\timport java.util.TreeMap;\n\t\n\timport org.dom4j.Document;\n\timport org.dom4j.DocumentException;\n\timport org.dom4j.Element;\n\timport org.dom4j.io.SAXReader;\n\timport org.xml.sax.InputSource;\n\t/**\n\t* ClassName:SignUtils</br>\n\t* Function: 签名用的工具箱</br>\n\t* Date:     2017-2-27 下午3:22:33 </br>\n\t* <功能详细描述>签名算法</br>\n\t* @author    \n\t*/\n\n\tpublic class SignUtils {\n\t    public static void main(String[] args) {\n\t        String key = \"CvRu8Dydbe7SETJoqh5wQYBp4PnZxigz\";\n\t        SortedMap<String,String> params = new TreeMap<String,String>();\n\t        params.put(\"orderId\", \"1112233\");\n\t        params.put(\"merchantId\", \"3700603014\");\n\t        params.put(\"applyAmount\", \"1000000\");\n\t        params.put(\"sign\", \"sdfsdf\");\n\t        String sign = getSign(params,key);//签名\n\t        System.out.println(\"sign:\"+sign.toUpperCase());\n\t        params.put(\"sign\", sign.toUpperCase());\n\t        System.out.println(\"sign:\"+checkParam(params,key));//验证\n\t    }\n\t    /** <一句话功能简述>\n\t     * <功能详细描述>验证返回参数\n\t     * @param params\n\t     * @param key\n\t     * @return\n\t     * @see [类、类#方法、类#成员]\n\t     */\n\t    public static boolean checkParam(Map<String,String> params,String key){\n\t        boolean result = false;\n\t        if(params.containsKey(\"sign\")){\n\t            String sign = params.get(\"sign\");\n\t            params.remove(\"sign\");\n\t            params = paraFilter(params);\n\t            StringBuilder buf = new StringBuilder((params.size() +1) * 10);\n\t            SignUtils.buildPayParams(buf,params,false);\n\t            String preStr = buf.toString();\n\t            String signRecieve = MD5.sign(preStr, \"&key=\" + key, \"utf-8\");\n\t            System.out.println(signRecieve);\n\t            result = sign.equalsIgnoreCase(signRecieve);\n\t        }\n\t        return result;\n\t    }\n\t    \n\t    /**\n\t     * 获取签名\n\t     * @param map 对象\n\t     * @param key 密匙\n\t     * @return 签名\n\t     */\n\t    public static String getSign(SortedMap<String,String> map,String key){\n\t        Map<String, String> params = SignUtils.paraFilter(map);\n\t        StringBuilder buf = new StringBuilder((params.size() + 1) * 10);\n\t        SignUtils.buildPayParams(buf, params, false);\n\t        String preStr = buf.toString();\n\t        System.out.println(preStr);\n\t        String sign = MD5.sign(preStr, \"&key=\" + key, \"utf-8\").toUpperCase();\n\t        return sign;\n\t    }\n\t    \n\t    /**\n\t     * 过滤参数:过滤掉sArray中value为空和key为sign的键值对\n\t     * @param sArray\n\t     * @return\n\t     */\n\t\n\t    public static Map<String, String> paraFilter(Map<String, String> sArray) {\n\t        Map<String, String> result = new HashMap<String, String>(sArray.size());\n\t        if (sArray == null || sArray.size() <= 0) {\n\t            return result;\n\t        }\n\t        for (String key : sArray.keySet()) {\n\t            String value = sArray.get(key);\n\t            if (value == null || value.equals(\"\") || key.equalsIgnoreCase(\"sign\")) {\n\t                continue;\n\t            }\n\t            result.put(key, value);\n\t        }\n\t        return result;\n\t    }\n\t    \n\t\n\t   /**\n\t    * 将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串stringA\n\t    * @param sb 返回的字符串\n\t    * @param payParams  集合M\n\t    * @param encoding 是否需要经过UTF-8编码：true-需要  false-不需要\n\t    */\n\t\n\t    public static void buildPayParams(StringBuilder sb,Map<String, String> payParams,boolean encoding){\n\t        List<String> keys = new ArrayList<String>(payParams.keySet());\n\t        Collections.sort(keys);\n\t        for(String key : keys){\n\t            sb.append(key).append(\"=\");\n\t            if(encoding){\n\t                sb.append(urlEncode(payParams.get(key)));\n\t            }else{\n\t                sb.append(payParams.get(key));\n\t            }\n\t            sb.append(\"&\");\n\t        }\n\t        sb.setLength(sb.length() - 1);\n\t    }\n\t    \n\t    public static String urlEncode(String str){\n\t        try {\n\t            return URLEncoder.encode(str, \"UTF-8\");\n\t        } catch (Throwable e) {\n\t            return str;\n\t        }\n\t    }\n\t    \n\t    \n\t    public static Element readerXml(String body,String encode) throws DocumentException {\n\t        SAXReader reader = new SAXReader(false);\n\t        InputSource source = new InputSource(new StringReader(body));\n\t        source.setEncoding(encode);\n\t        Document doc = reader.read(source);\n\t        Element element = doc.getRootElement();\n\t        return element;\n\t    }\n\t\n\t}\n```\n","slug":"signUtil","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjig1il3b0008j4vlaxwi3pbk","content":"<p>签名算法工具，签名生成的步骤如下：<br> 第一步，设所有发送或者接收到的数据为集合M，将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串stringA。</p>\n<p> 第二步，在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。</p>\n<p>特别注意以下重要规则：<br><br>    ◆ 参数名ASCII码从小到大排序（字典序）；<br><br>    ◆ 如果参数的值为空不参与签名；<br><br>    ◆ 参数名区分大小写；<br><br>    ◆ 验证调用返回或主动通知签名时，传送的sign参数不参与签名，将生成的签名与该sign值作校验。<br><br>    ◆ key值由互金端提供；<br></p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.StringReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"keyword\">HashMap</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.SortedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.DocumentException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.SAXReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.xml.sax.InputSource;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* ClassName:SignUtils&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\">* Function: 签名用的工具箱&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\">* Date:     2017-2-27 下午3:22:33 &lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;功能详细描述&gt;签名算法&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\">* @author    </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> class SignUtils &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">String</span> <span class=\"built_in\">key</span> = <span class=\"string\">\"CvRu8Dydbe7SETJoqh5wQYBp4PnZxigz\"</span>;</span><br><span class=\"line\">        SortedMap&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">String</span>&gt; params = <span class=\"keyword\">new</span> TreeMap&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">String</span>&gt;();</span><br><span class=\"line\">        params.put(<span class=\"string\">\"orderId\"</span>, <span class=\"string\">\"1112233\"</span>);</span><br><span class=\"line\">        params.put(<span class=\"string\">\"merchantId\"</span>, <span class=\"string\">\"3700603014\"</span>);</span><br><span class=\"line\">        params.put(<span class=\"string\">\"applyAmount\"</span>, <span class=\"string\">\"1000000\"</span>);</span><br><span class=\"line\">        params.put(<span class=\"string\">\"sign\"</span>, <span class=\"string\">\"sdfsdf\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">String</span> sign = getSign(params,<span class=\"built_in\">key</span>);<span class=\"comment\">//签名</span></span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"sign:\"</span>+sign.toUpperCase());</span><br><span class=\"line\">        params.put(<span class=\"string\">\"sign\"</span>, sign.toUpperCase());</span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"sign:\"</span>+checkParam(params,<span class=\"built_in\">key</span>));<span class=\"comment\">//验证</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** &lt;一句话功能简述&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;功能详细描述&gt;验证返回参数</span></span><br><span class=\"line\"><span class=\"comment\">     * @param params</span></span><br><span class=\"line\"><span class=\"comment\">     * @param key</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     * @see [类、类#方法、类#成员]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> checkParam(Map&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">String</span>&gt; params,<span class=\"keyword\">String</span> <span class=\"built_in\">key</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(params.containsKey(<span class=\"string\">\"sign\"</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">String</span> sign = params.<span class=\"built_in\">get</span>(<span class=\"string\">\"sign\"</span>);</span><br><span class=\"line\">            params.remove(<span class=\"string\">\"sign\"</span>);</span><br><span class=\"line\">            params = paraFilter(params);</span><br><span class=\"line\">            StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder((params.<span class=\"built_in\">size</span>() +<span class=\"number\">1</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            SignUtils.buildPayParams(buf,params,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">String</span> preStr = buf.toString();</span><br><span class=\"line\">            <span class=\"keyword\">String</span> signRecieve = MD5.sign(preStr, <span class=\"string\">\"&amp;key=\"</span> + <span class=\"built_in\">key</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">            System.out.<span class=\"built_in\">println</span>(signRecieve);</span><br><span class=\"line\">            result = sign.equalsIgnoreCase(signRecieve);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取签名</span></span><br><span class=\"line\"><span class=\"comment\">     * @param map 对象</span></span><br><span class=\"line\"><span class=\"comment\">     * @param key 密匙</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 签名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getSign(SortedMap&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">String</span>&gt; <span class=\"built_in\">map</span>,<span class=\"keyword\">String</span> <span class=\"built_in\">key</span>)&#123;</span><br><span class=\"line\">        Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; params = SignUtils.paraFilter(<span class=\"built_in\">map</span>);</span><br><span class=\"line\">        StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder((params.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">        SignUtils.buildPayParams(buf, params, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">String</span> preStr = buf.toString();</span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(preStr);</span><br><span class=\"line\">        <span class=\"keyword\">String</span> sign = MD5.sign(preStr, <span class=\"string\">\"&amp;key=\"</span> + <span class=\"built_in\">key</span>, <span class=\"string\">\"utf-8\"</span>).toUpperCase();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sign;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤参数:过滤掉sArray中value为空和key为sign的键值对</span></span><br><span class=\"line\"><span class=\"comment\">     * @param sArray</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; paraFilter(Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; sArray) &#123;</span><br><span class=\"line\">        Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; result = <span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt;(sArray.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sArray == <span class=\"keyword\">null</span> || sArray.<span class=\"built_in\">size</span>() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">String</span> <span class=\"built_in\">key</span> : sArray.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">String</span> value = sArray.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span> || value.equals(<span class=\"string\">\"\"</span>) || <span class=\"built_in\">key</span>.equalsIgnoreCase(<span class=\"string\">\"sign\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result.put(<span class=\"built_in\">key</span>, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串stringA</span></span><br><span class=\"line\"><span class=\"comment\">    * @param sb 返回的字符串</span></span><br><span class=\"line\"><span class=\"comment\">    * @param payParams  集合M</span></span><br><span class=\"line\"><span class=\"comment\">    * @param encoding 是否需要经过UTF-8编码：true-需要  false-不需要</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> buildPayParams(StringBuilder sb,Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; payParams,<span class=\"built_in\">boolean</span> encoding)&#123;</span><br><span class=\"line\">        List&lt;<span class=\"keyword\">String</span>&gt; keys = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt;(payParams.keySet());</span><br><span class=\"line\">        Collections.<span class=\"built_in\">sort</span>(keys);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">String</span> <span class=\"built_in\">key</span> : keys)&#123;</span><br><span class=\"line\">            sb.<span class=\"built_in\">append</span>(<span class=\"built_in\">key</span>).<span class=\"built_in\">append</span>(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(encoding)&#123;</span><br><span class=\"line\">                sb.<span class=\"built_in\">append</span>(urlEncode(payParams.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>)));</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                sb.<span class=\"built_in\">append</span>(payParams.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sb.<span class=\"built_in\">append</span>(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.setLength(sb.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> urlEncode(<span class=\"keyword\">String</span> <span class=\"built_in\">str</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> URLEncoder.encode(<span class=\"built_in\">str</span>, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Element readerXml(<span class=\"keyword\">String</span> body,<span class=\"keyword\">String</span> encode) <span class=\"keyword\">throws</span> DocumentException &#123;</span><br><span class=\"line\">        SAXReader reader = <span class=\"keyword\">new</span> SAXReader(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        InputSource source = <span class=\"keyword\">new</span> InputSource(<span class=\"keyword\">new</span> StringReader(body));</span><br><span class=\"line\">        source.setEncoding(encode);</span><br><span class=\"line\">        Document doc = reader.read(source);</span><br><span class=\"line\">        Element element = doc.getRootElement();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>签名算法工具，签名生成的步骤如下：<br> 第一步，设所有发送或者接收到的数据为集合M，将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串stringA。</p>\n<p> 第二步，在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。</p>\n<p>特别注意以下重要规则：<br><br>    ◆ 参数名ASCII码从小到大排序（字典序）；<br><br>    ◆ 如果参数的值为空不参与签名；<br><br>    ◆ 参数名区分大小写；<br><br>    ◆ 验证调用返回或主动通知签名时，传送的sign参数不参与签名，将生成的签名与该sign值作校验。<br><br>    ◆ key值由互金端提供；<br></p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.StringReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"keyword\">HashMap</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.SortedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.DocumentException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.SAXReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.xml.sax.InputSource;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* ClassName:SignUtils&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\">* Function: 签名用的工具箱&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\">* Date:     2017-2-27 下午3:22:33 &lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;功能详细描述&gt;签名算法&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\">* @author    </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> class SignUtils &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">String</span> <span class=\"built_in\">key</span> = <span class=\"string\">\"CvRu8Dydbe7SETJoqh5wQYBp4PnZxigz\"</span>;</span><br><span class=\"line\">        SortedMap&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">String</span>&gt; params = <span class=\"keyword\">new</span> TreeMap&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">String</span>&gt;();</span><br><span class=\"line\">        params.put(<span class=\"string\">\"orderId\"</span>, <span class=\"string\">\"1112233\"</span>);</span><br><span class=\"line\">        params.put(<span class=\"string\">\"merchantId\"</span>, <span class=\"string\">\"3700603014\"</span>);</span><br><span class=\"line\">        params.put(<span class=\"string\">\"applyAmount\"</span>, <span class=\"string\">\"1000000\"</span>);</span><br><span class=\"line\">        params.put(<span class=\"string\">\"sign\"</span>, <span class=\"string\">\"sdfsdf\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">String</span> sign = getSign(params,<span class=\"built_in\">key</span>);<span class=\"comment\">//签名</span></span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"sign:\"</span>+sign.toUpperCase());</span><br><span class=\"line\">        params.put(<span class=\"string\">\"sign\"</span>, sign.toUpperCase());</span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"sign:\"</span>+checkParam(params,<span class=\"built_in\">key</span>));<span class=\"comment\">//验证</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** &lt;一句话功能简述&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;功能详细描述&gt;验证返回参数</span></span><br><span class=\"line\"><span class=\"comment\">     * @param params</span></span><br><span class=\"line\"><span class=\"comment\">     * @param key</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     * @see [类、类#方法、类#成员]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> checkParam(Map&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">String</span>&gt; params,<span class=\"keyword\">String</span> <span class=\"built_in\">key</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(params.containsKey(<span class=\"string\">\"sign\"</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">String</span> sign = params.<span class=\"built_in\">get</span>(<span class=\"string\">\"sign\"</span>);</span><br><span class=\"line\">            params.remove(<span class=\"string\">\"sign\"</span>);</span><br><span class=\"line\">            params = paraFilter(params);</span><br><span class=\"line\">            StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder((params.<span class=\"built_in\">size</span>() +<span class=\"number\">1</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            SignUtils.buildPayParams(buf,params,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">String</span> preStr = buf.toString();</span><br><span class=\"line\">            <span class=\"keyword\">String</span> signRecieve = MD5.sign(preStr, <span class=\"string\">\"&amp;key=\"</span> + <span class=\"built_in\">key</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">            System.out.<span class=\"built_in\">println</span>(signRecieve);</span><br><span class=\"line\">            result = sign.equalsIgnoreCase(signRecieve);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取签名</span></span><br><span class=\"line\"><span class=\"comment\">     * @param map 对象</span></span><br><span class=\"line\"><span class=\"comment\">     * @param key 密匙</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 签名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getSign(SortedMap&lt;<span class=\"keyword\">String</span>,<span class=\"keyword\">String</span>&gt; <span class=\"built_in\">map</span>,<span class=\"keyword\">String</span> <span class=\"built_in\">key</span>)&#123;</span><br><span class=\"line\">        Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; params = SignUtils.paraFilter(<span class=\"built_in\">map</span>);</span><br><span class=\"line\">        StringBuilder buf = <span class=\"keyword\">new</span> StringBuilder((params.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">        SignUtils.buildPayParams(buf, params, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">String</span> preStr = buf.toString();</span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(preStr);</span><br><span class=\"line\">        <span class=\"keyword\">String</span> sign = MD5.sign(preStr, <span class=\"string\">\"&amp;key=\"</span> + <span class=\"built_in\">key</span>, <span class=\"string\">\"utf-8\"</span>).toUpperCase();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sign;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤参数:过滤掉sArray中value为空和key为sign的键值对</span></span><br><span class=\"line\"><span class=\"comment\">     * @param sArray</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; paraFilter(Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; sArray) &#123;</span><br><span class=\"line\">        Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; result = <span class=\"keyword\">new</span> <span class=\"keyword\">HashMap</span>&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt;(sArray.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sArray == <span class=\"keyword\">null</span> || sArray.<span class=\"built_in\">size</span>() &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">String</span> <span class=\"built_in\">key</span> : sArray.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">String</span> value = sArray.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span> || value.equals(<span class=\"string\">\"\"</span>) || <span class=\"built_in\">key</span>.equalsIgnoreCase(<span class=\"string\">\"sign\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result.put(<span class=\"built_in\">key</span>, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串stringA</span></span><br><span class=\"line\"><span class=\"comment\">    * @param sb 返回的字符串</span></span><br><span class=\"line\"><span class=\"comment\">    * @param payParams  集合M</span></span><br><span class=\"line\"><span class=\"comment\">    * @param encoding 是否需要经过UTF-8编码：true-需要  false-不需要</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> buildPayParams(StringBuilder sb,Map&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">String</span>&gt; payParams,<span class=\"built_in\">boolean</span> encoding)&#123;</span><br><span class=\"line\">        List&lt;<span class=\"keyword\">String</span>&gt; keys = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt;(payParams.keySet());</span><br><span class=\"line\">        Collections.<span class=\"built_in\">sort</span>(keys);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">String</span> <span class=\"built_in\">key</span> : keys)&#123;</span><br><span class=\"line\">            sb.<span class=\"built_in\">append</span>(<span class=\"built_in\">key</span>).<span class=\"built_in\">append</span>(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(encoding)&#123;</span><br><span class=\"line\">                sb.<span class=\"built_in\">append</span>(urlEncode(payParams.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>)));</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                sb.<span class=\"built_in\">append</span>(payParams.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sb.<span class=\"built_in\">append</span>(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.setLength(sb.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> urlEncode(<span class=\"keyword\">String</span> <span class=\"built_in\">str</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> URLEncoder.encode(<span class=\"built_in\">str</span>, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Element readerXml(<span class=\"keyword\">String</span> body,<span class=\"keyword\">String</span> encode) <span class=\"keyword\">throws</span> DocumentException &#123;</span><br><span class=\"line\">        SAXReader reader = <span class=\"keyword\">new</span> SAXReader(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        InputSource source = <span class=\"keyword\">new</span> InputSource(<span class=\"keyword\">new</span> StringReader(body));</span><br><span class=\"line\">        source.setEncoding(encode);</span><br><span class=\"line\">        Document doc = reader.read(source);</span><br><span class=\"line\">        Element element = doc.getRootElement();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"HttpUtil工具类","date":"2017-01-07T16:55:44.000Z","updated":"2018-06-15T13:49:28.910Z","_content":"HttpUtil工具类使用HttpClients\n\n```\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.security.GeneralSecurityException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.config.RequestConfig;\nimport  org.apache.http.client.entity.UrlEncodedFormEntity;\nimport  org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport  org.apache.http.conn.ssl.SSLConnectionSocketFactory;\nimport org.apache.http.conn.ssl.TrustStrategy;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport  org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.ssl.SSLContextBuilder;\nimport org.apache.http.util.EntityUtils;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.yeahka.loan.yunxin.constant.YunXinConstant;\nimport com.yeahka.util.JsonUtil;\npublic class YunXinHttpUtil {\n     private static final Log log =  LogFactory.getLog(YunXinHttpUtil.class);\n     private static PoolingHttpClientConnectionManager  connMgr;\n     private static RequestConfig requestConfig;\n     private static final int MAX_TIMEOUT = 30000;\n     static {\n          // 设置连接池\n          connMgr = new  PoolingHttpClientConnectionManager();\n          // 设置连接池大小\n          connMgr.setMaxTotal(100);\n          connMgr.setDefaultMaxPerRoute(connMgr.getMaxTotal());\n          RequestConfig.Builder configBuilder =  RequestConfig.custom();\n          // 设置连接超时\n          configBuilder.setConnectTimeout(MAX_TIMEOUT);\n          // 设置读取超时\n          configBuilder.setSocketTimeout(MAX_TIMEOUT);\n          // 设置从连接池获取连接实例的超时\n          configBuilder.setConnectionRequestTimeout(MAX_TIMEOUT);\n          // 在提交请求之前 测试连接是否可用\n          //  configBuilder.setValidateAfterInactivity(true);\n          requestConfig = configBuilder.build();\n     }\n     /**\n      * 发送 GET 请求（HTTP/HTTPS），K-V形式\n      *\n      * @param url\n      * @param params\n      * @return\n      */\n     public static String doGet(String url, Map<String,  Object> params) {\n          String apiUrl = url;\n          CloseableHttpClient httpClient = null;\n          if(url.startsWith(\"https:\")){\n              httpClient = HttpClients.custom()\n                        .setSSLSocketFactory(createSSLConnSocketFactory())\n                        .setConnectionManager(connMgr)\n                        .setDefaultRequestConfig(requestConfig).build();\n          }else{\n              httpClient = HttpClients.createDefault();\n          }\n          StringBuffer param = new StringBuffer();\n          \n          int i = 0;\n          for (String key : params.keySet()) {\n              if (i == 0)\n                   param.append(\"?\");\n              else\n                   param.append(\"&\");\n               param.append(key).append(\"=\").append(params.get(key));\n              i++;\n          }\n          apiUrl += param;\n          String result = null;\n          \n          try {\n              HttpGet httpPost = new HttpGet(apiUrl);\n              HttpResponse response =  httpClient.execute(httpPost);\n              int statusCode =  response.getStatusLine().getStatusCode();\n              System.out.println(\"执行状态码 : \" +  statusCode);\n              HttpEntity entity = response.getEntity();\n              if (entity != null) {\n                   InputStream instream =  entity.getContent();\n                   result = IOUtils.toString(instream,  \"UTF-8\");\n              }\n          } catch (IOException e) {\n              e.printStackTrace();\n          } finally {\n              if (httpClient != null) {\n                   HttpClientUtils.closeQuietly(httpClient);\n              }\n          }\n          log.info(\"request to : {\"+apiUrl+\"} , param :  {\"+param.toString()+\"} , result : {\"+result+\"}\");\n          return result;\n     }\n     \n     /**\n      * 发送 POST 请求（HTTP/HTTPS），K-V形式\n      *\n      * @param url\n      *            API接口URL\n      * @param params\n      *            参数map\n      * @return\n      */\n     public static String doPost(String url, Map<String,  Object> params) {\n          CloseableHttpClient httpClient = null;\n          String httpStr = null;\n          HttpPost httpPost = null;\n          CloseableHttpResponse response = null;\n          if(url.startsWith(\"https:\")){\n              httpClient = HttpClients.custom()\n                        .setSSLSocketFactory(createSSLConnSocketFactory())\n                        .setConnectionManager(connMgr)\n                        .setDefaultRequestConfig(requestConfig).build();\n              httpPost = new HttpPost(url);\n          }else{\n              httpClient = HttpClients.createDefault();\n              httpPost = new HttpPost(url);\n          }\n          try {\n              httpPost.setConfig(requestConfig);\n              List<NameValuePair> pairList = new  ArrayList<NameValuePair>();\n              for (Map.Entry<String, Object> entry :  params.entrySet()) {\n                   NameValuePair pair = new  BasicNameValuePair(entry.getKey(),\n                             entry.getValue().toString());\n                   pairList.add(pair);\n              }\n              httpPost.setEntity(new  UrlEncodedFormEntity(pairList, Charset\n                        .forName(\"UTF-8\")));\n              response = httpClient.execute(httpPost);\n              System.out.println(response.toString());\n              HttpEntity entity = response.getEntity();\n              httpStr = EntityUtils.toString(entity,  \"UTF-8\");\n          } catch (IOException e) {\n              e.printStackTrace();\n          } finally {\n              if (response != null) {\n                   try {\n                        EntityUtils.consume(response.getEntity());\n                   } catch (IOException e) {\n                        e.printStackTrace();\n                   }\n              }\n          }\n          return httpStr;\n     }\n     /**\n      * 发送 POST 请求（HTTP/HTTPS），JSON形式\n      *\n      * @param url\n      * @param json\n      *            json对象\n      * @return\n      */\n     public static String doPost(String url,Object obj) {\n          CloseableHttpClient httpClient = null;\n          String httpStr = null;\n          HttpPost httpPost = null;\n          CloseableHttpResponse response = null;\n          if(url.startsWith(\"https:\")){\n              httpClient = HttpClients.custom()\n                        .setSSLSocketFactory(createSSLConnSocketFactory())\n                        .setConnectionManager(connMgr)\n                        .setDefaultRequestConfig(requestConfig).build();\n              httpPost = new HttpPost(url);\n          }else{\n              httpClient = HttpClients.createDefault();\n              httpPost = new HttpPost(url);\n          }\n          try {\n              String json = JsonUtil.obj2json(obj);\n              log.info(json);\n              ObjectMapper mapper = new ObjectMapper();\n              httpPost.setConfig(requestConfig);\n              httpPost.setHeader(\"Content-Type\",  \"application/json\");\n              httpPost.setHeader(\"MerId\",  YunXinConstant.merId);\n              httpPost.setHeader(\"SecretKey\",  YunXinConstant.secretKey);\n               httpPost.setHeader(\"SignedMsg\",getSignMsg(mapper.writeValueAsString(obj)));\n              StringEntity stringEntity = new  StringEntity(json,\"UTF-8\");// 解决中文乱码问题\n              stringEntity.setContentEncoding(\"UTF-8\");\n               stringEntity.setContentType(\"application/json\");\n              httpPost.setEntity(stringEntity);\n              response = httpClient.execute(httpPost);\n              HttpEntity entity = response.getEntity();\n              httpStr = EntityUtils.toString(entity,  \"UTF-8\");\n          } catch (IOException e) {\n              e.printStackTrace();\n          } finally {\n              if (response != null) {\n                   try {\n                        EntityUtils.consume(response.getEntity());\n                   } catch (IOException e) {\n                        e.printStackTrace();\n                   }\n              }\n          }\n          return httpStr;\n     }\n     private static String getSignMsg(String msg){\n          RsaSignUtils utl = new  RsaSignUtils(YunXinConstant.privateKeyPath,YunXinConstant.privateCertPassword);\n          return utl.generate(msg);\n     }\n     /**\n      * 创建SSL安全连接\n      *\n      * @return\n      */\n     private static SSLConnectionSocketFactory  createSSLConnSocketFactory() {\n          SSLConnectionSocketFactory sslsf = null;\n          try {\n              SSLContext sslContext = new  SSLContextBuilder().loadTrustMaterial(\n                        null, new TrustStrategy() {\n                             public boolean  isTrusted(X509Certificate[] chain,\n                                      String authType)  throws CertificateException {\n                                  return true;\n                             }\n                        }).build();\n              sslsf = new  SSLConnectionSocketFactory(sslContext,\n                        new HostnameVerifier() {\n                   public boolean verify(String hostname,\n                             SSLSession session) {\n                        // TODO Auto-generated method  stub\n                        return false;\n                   }\n              });\n          } catch (GeneralSecurityException e) {\n              e.printStackTrace();\n          }\n          return sslsf;\n     }\n}\n\n```","source":"_posts/httpUtil.md","raw":"---\ntitle: HttpUtil工具类\ndate: 2017-01-07 24:55:44\nupdated: \ncategories: code\npermalink:\ntags: [HttpUtil,工具类]\n---\nHttpUtil工具类使用HttpClients\n\n```\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.security.GeneralSecurityException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.config.RequestConfig;\nimport  org.apache.http.client.entity.UrlEncodedFormEntity;\nimport  org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport  org.apache.http.conn.ssl.SSLConnectionSocketFactory;\nimport org.apache.http.conn.ssl.TrustStrategy;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport  org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.ssl.SSLContextBuilder;\nimport org.apache.http.util.EntityUtils;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.yeahka.loan.yunxin.constant.YunXinConstant;\nimport com.yeahka.util.JsonUtil;\npublic class YunXinHttpUtil {\n     private static final Log log =  LogFactory.getLog(YunXinHttpUtil.class);\n     private static PoolingHttpClientConnectionManager  connMgr;\n     private static RequestConfig requestConfig;\n     private static final int MAX_TIMEOUT = 30000;\n     static {\n          // 设置连接池\n          connMgr = new  PoolingHttpClientConnectionManager();\n          // 设置连接池大小\n          connMgr.setMaxTotal(100);\n          connMgr.setDefaultMaxPerRoute(connMgr.getMaxTotal());\n          RequestConfig.Builder configBuilder =  RequestConfig.custom();\n          // 设置连接超时\n          configBuilder.setConnectTimeout(MAX_TIMEOUT);\n          // 设置读取超时\n          configBuilder.setSocketTimeout(MAX_TIMEOUT);\n          // 设置从连接池获取连接实例的超时\n          configBuilder.setConnectionRequestTimeout(MAX_TIMEOUT);\n          // 在提交请求之前 测试连接是否可用\n          //  configBuilder.setValidateAfterInactivity(true);\n          requestConfig = configBuilder.build();\n     }\n     /**\n      * 发送 GET 请求（HTTP/HTTPS），K-V形式\n      *\n      * @param url\n      * @param params\n      * @return\n      */\n     public static String doGet(String url, Map<String,  Object> params) {\n          String apiUrl = url;\n          CloseableHttpClient httpClient = null;\n          if(url.startsWith(\"https:\")){\n              httpClient = HttpClients.custom()\n                        .setSSLSocketFactory(createSSLConnSocketFactory())\n                        .setConnectionManager(connMgr)\n                        .setDefaultRequestConfig(requestConfig).build();\n          }else{\n              httpClient = HttpClients.createDefault();\n          }\n          StringBuffer param = new StringBuffer();\n          \n          int i = 0;\n          for (String key : params.keySet()) {\n              if (i == 0)\n                   param.append(\"?\");\n              else\n                   param.append(\"&\");\n               param.append(key).append(\"=\").append(params.get(key));\n              i++;\n          }\n          apiUrl += param;\n          String result = null;\n          \n          try {\n              HttpGet httpPost = new HttpGet(apiUrl);\n              HttpResponse response =  httpClient.execute(httpPost);\n              int statusCode =  response.getStatusLine().getStatusCode();\n              System.out.println(\"执行状态码 : \" +  statusCode);\n              HttpEntity entity = response.getEntity();\n              if (entity != null) {\n                   InputStream instream =  entity.getContent();\n                   result = IOUtils.toString(instream,  \"UTF-8\");\n              }\n          } catch (IOException e) {\n              e.printStackTrace();\n          } finally {\n              if (httpClient != null) {\n                   HttpClientUtils.closeQuietly(httpClient);\n              }\n          }\n          log.info(\"request to : {\"+apiUrl+\"} , param :  {\"+param.toString()+\"} , result : {\"+result+\"}\");\n          return result;\n     }\n     \n     /**\n      * 发送 POST 请求（HTTP/HTTPS），K-V形式\n      *\n      * @param url\n      *            API接口URL\n      * @param params\n      *            参数map\n      * @return\n      */\n     public static String doPost(String url, Map<String,  Object> params) {\n          CloseableHttpClient httpClient = null;\n          String httpStr = null;\n          HttpPost httpPost = null;\n          CloseableHttpResponse response = null;\n          if(url.startsWith(\"https:\")){\n              httpClient = HttpClients.custom()\n                        .setSSLSocketFactory(createSSLConnSocketFactory())\n                        .setConnectionManager(connMgr)\n                        .setDefaultRequestConfig(requestConfig).build();\n              httpPost = new HttpPost(url);\n          }else{\n              httpClient = HttpClients.createDefault();\n              httpPost = new HttpPost(url);\n          }\n          try {\n              httpPost.setConfig(requestConfig);\n              List<NameValuePair> pairList = new  ArrayList<NameValuePair>();\n              for (Map.Entry<String, Object> entry :  params.entrySet()) {\n                   NameValuePair pair = new  BasicNameValuePair(entry.getKey(),\n                             entry.getValue().toString());\n                   pairList.add(pair);\n              }\n              httpPost.setEntity(new  UrlEncodedFormEntity(pairList, Charset\n                        .forName(\"UTF-8\")));\n              response = httpClient.execute(httpPost);\n              System.out.println(response.toString());\n              HttpEntity entity = response.getEntity();\n              httpStr = EntityUtils.toString(entity,  \"UTF-8\");\n          } catch (IOException e) {\n              e.printStackTrace();\n          } finally {\n              if (response != null) {\n                   try {\n                        EntityUtils.consume(response.getEntity());\n                   } catch (IOException e) {\n                        e.printStackTrace();\n                   }\n              }\n          }\n          return httpStr;\n     }\n     /**\n      * 发送 POST 请求（HTTP/HTTPS），JSON形式\n      *\n      * @param url\n      * @param json\n      *            json对象\n      * @return\n      */\n     public static String doPost(String url,Object obj) {\n          CloseableHttpClient httpClient = null;\n          String httpStr = null;\n          HttpPost httpPost = null;\n          CloseableHttpResponse response = null;\n          if(url.startsWith(\"https:\")){\n              httpClient = HttpClients.custom()\n                        .setSSLSocketFactory(createSSLConnSocketFactory())\n                        .setConnectionManager(connMgr)\n                        .setDefaultRequestConfig(requestConfig).build();\n              httpPost = new HttpPost(url);\n          }else{\n              httpClient = HttpClients.createDefault();\n              httpPost = new HttpPost(url);\n          }\n          try {\n              String json = JsonUtil.obj2json(obj);\n              log.info(json);\n              ObjectMapper mapper = new ObjectMapper();\n              httpPost.setConfig(requestConfig);\n              httpPost.setHeader(\"Content-Type\",  \"application/json\");\n              httpPost.setHeader(\"MerId\",  YunXinConstant.merId);\n              httpPost.setHeader(\"SecretKey\",  YunXinConstant.secretKey);\n               httpPost.setHeader(\"SignedMsg\",getSignMsg(mapper.writeValueAsString(obj)));\n              StringEntity stringEntity = new  StringEntity(json,\"UTF-8\");// 解决中文乱码问题\n              stringEntity.setContentEncoding(\"UTF-8\");\n               stringEntity.setContentType(\"application/json\");\n              httpPost.setEntity(stringEntity);\n              response = httpClient.execute(httpPost);\n              HttpEntity entity = response.getEntity();\n              httpStr = EntityUtils.toString(entity,  \"UTF-8\");\n          } catch (IOException e) {\n              e.printStackTrace();\n          } finally {\n              if (response != null) {\n                   try {\n                        EntityUtils.consume(response.getEntity());\n                   } catch (IOException e) {\n                        e.printStackTrace();\n                   }\n              }\n          }\n          return httpStr;\n     }\n     private static String getSignMsg(String msg){\n          RsaSignUtils utl = new  RsaSignUtils(YunXinConstant.privateKeyPath,YunXinConstant.privateCertPassword);\n          return utl.generate(msg);\n     }\n     /**\n      * 创建SSL安全连接\n      *\n      * @return\n      */\n     private static SSLConnectionSocketFactory  createSSLConnSocketFactory() {\n          SSLConnectionSocketFactory sslsf = null;\n          try {\n              SSLContext sslContext = new  SSLContextBuilder().loadTrustMaterial(\n                        null, new TrustStrategy() {\n                             public boolean  isTrusted(X509Certificate[] chain,\n                                      String authType)  throws CertificateException {\n                                  return true;\n                             }\n                        }).build();\n              sslsf = new  SSLConnectionSocketFactory(sslContext,\n                        new HostnameVerifier() {\n                   public boolean verify(String hostname,\n                             SSLSession session) {\n                        // TODO Auto-generated method  stub\n                        return false;\n                   }\n              });\n          } catch (GeneralSecurityException e) {\n              e.printStackTrace();\n          }\n          return sslsf;\n     }\n}\n\n```","slug":"httpUtil","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjig1il3f000aj4vlkxpfpv3i","content":"<p>HttpUtil工具类使用HttpClients</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.GeneralSecurityException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.CertificateException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.X509Certificate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.HostnameVerifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.IOUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.NameValuePair;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.config.RequestConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span>  org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span>  org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.utils.HttpClientUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span>  org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.TrustStrategy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.entity.StringEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span>  org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.ssl.SSLContextBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.yeahka.loan.yunxin.constant.YunXinConstant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.yeahka.util.JsonUtil;</span><br><span class=\"line\"><span class=\"keyword\">public</span> class YunXinHttpUtil &#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Log <span class=\"built_in\">log</span> =  LogFactory.getLog(YunXinHttpUtil.class);</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> PoolingHttpClientConnectionManager  connMgr;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RequestConfig requestConfig;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> MAX_TIMEOUT = <span class=\"number\">30000</span>;</span><br><span class=\"line\">     <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 设置连接池</span></span><br><span class=\"line\">          connMgr = <span class=\"keyword\">new</span>  PoolingHttpClientConnectionManager();</span><br><span class=\"line\">          <span class=\"comment\">// 设置连接池大小</span></span><br><span class=\"line\">          connMgr.setMaxTotal(<span class=\"number\">100</span>);</span><br><span class=\"line\">          connMgr.setDefaultMaxPerRoute(connMgr.getMaxTotal());</span><br><span class=\"line\">          RequestConfig.Builder configBuilder =  RequestConfig.custom();</span><br><span class=\"line\">          <span class=\"comment\">// 设置连接超时</span></span><br><span class=\"line\">          configBuilder.setConnectTimeout(MAX_TIMEOUT);</span><br><span class=\"line\">          <span class=\"comment\">// 设置读取超时</span></span><br><span class=\"line\">          configBuilder.setSocketTimeout(MAX_TIMEOUT);</span><br><span class=\"line\">          <span class=\"comment\">// 设置从连接池获取连接实例的超时</span></span><br><span class=\"line\">          configBuilder.setConnectionRequestTimeout(MAX_TIMEOUT);</span><br><span class=\"line\">          <span class=\"comment\">// 在提交请求之前 测试连接是否可用</span></span><br><span class=\"line\">          <span class=\"comment\">//  configBuilder.setValidateAfterInactivity(true);</span></span><br><span class=\"line\">          requestConfig = configBuilder.build();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 发送 GET 请求（HTTP/HTTPS），K-V形式</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * @param url</span></span><br><span class=\"line\"><span class=\"comment\">      * @param params</span></span><br><span class=\"line\"><span class=\"comment\">      * @return</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> doGet(<span class=\"keyword\">String</span> url, Map&lt;<span class=\"keyword\">String</span>,  <span class=\"keyword\">Object</span>&gt; params) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">String</span> apiUrl = url;</span><br><span class=\"line\">          CloseableHttpClient httpClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(url.startsWith(<span class=\"string\">\"https:\"</span>))&#123;</span><br><span class=\"line\">              httpClient = HttpClients.custom()</span><br><span class=\"line\">                        .setSSLSocketFactory(createSSLConnSocketFactory())</span><br><span class=\"line\">                        .setConnectionManager(connMgr)</span><br><span class=\"line\">                        .setDefaultRequestConfig(requestConfig).build();</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              httpClient = HttpClients.createDefault();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          StringBuffer param = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">String</span> <span class=\"built_in\">key</span> : params.keySet()) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                   param.<span class=\"built_in\">append</span>(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">              <span class=\"keyword\">else</span></span><br><span class=\"line\">                   param.<span class=\"built_in\">append</span>(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">               param.<span class=\"built_in\">append</span>(<span class=\"built_in\">key</span>).<span class=\"built_in\">append</span>(<span class=\"string\">\"=\"</span>).<span class=\"built_in\">append</span>(params.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>));</span><br><span class=\"line\">              i++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          apiUrl += param;</span><br><span class=\"line\">          <span class=\"keyword\">String</span> result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              HttpGet httpPost = <span class=\"keyword\">new</span> HttpGet(apiUrl);</span><br><span class=\"line\">              HttpResponse response =  httpClient.execute(httpPost);</span><br><span class=\"line\">              <span class=\"built_in\">int</span> statusCode =  response.getStatusLine().getStatusCode();</span><br><span class=\"line\">              System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"执行状态码 : \"</span> +  statusCode);</span><br><span class=\"line\">              HttpEntity entity = response.getEntity();</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (entity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   InputStream instream =  entity.getContent();</span><br><span class=\"line\">                   result = IOUtils.toString(instream,  <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (httpClient != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   HttpClientUtils.closeQuietly(httpClient);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"built_in\">log</span>.info(<span class=\"string\">\"request to : &#123;\"</span>+apiUrl+<span class=\"string\">\"&#125; , param :  &#123;\"</span>+param.toString()+<span class=\"string\">\"&#125; , result : &#123;\"</span>+result+<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 发送 POST 请求（HTTP/HTTPS），K-V形式</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * @param url</span></span><br><span class=\"line\"><span class=\"comment\">      *            API接口URL</span></span><br><span class=\"line\"><span class=\"comment\">      * @param params</span></span><br><span class=\"line\"><span class=\"comment\">      *            参数map</span></span><br><span class=\"line\"><span class=\"comment\">      * @return</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> doPost(<span class=\"keyword\">String</span> url, Map&lt;<span class=\"keyword\">String</span>,  <span class=\"keyword\">Object</span>&gt; params) &#123;</span><br><span class=\"line\">          CloseableHttpClient httpClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">String</span> httpStr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          HttpPost httpPost = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          CloseableHttpResponse response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(url.startsWith(<span class=\"string\">\"https:\"</span>))&#123;</span><br><span class=\"line\">              httpClient = HttpClients.custom()</span><br><span class=\"line\">                        .setSSLSocketFactory(createSSLConnSocketFactory())</span><br><span class=\"line\">                        .setConnectionManager(connMgr)</span><br><span class=\"line\">                        .setDefaultRequestConfig(requestConfig).build();</span><br><span class=\"line\">              httpPost = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              httpClient = HttpClients.createDefault();</span><br><span class=\"line\">              httpPost = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              httpPost.setConfig(requestConfig);</span><br><span class=\"line\">              List&lt;NameValuePair&gt; pairList = <span class=\"keyword\">new</span>  ArrayList&lt;NameValuePair&gt;();</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (Map.Entry&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; entry :  params.entrySet()) &#123;</span><br><span class=\"line\">                   NameValuePair pair = <span class=\"keyword\">new</span>  BasicNameValuePair(entry.getKey(),</span><br><span class=\"line\">                             entry.getValue().toString());</span><br><span class=\"line\">                   pairList.<span class=\"built_in\">add</span>(pair);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              httpPost.setEntity(<span class=\"keyword\">new</span>  UrlEncodedFormEntity(pairList, Charset</span><br><span class=\"line\">                        .forName(<span class=\"string\">\"UTF-8\"</span>)));</span><br><span class=\"line\">              response = httpClient.execute(httpPost);</span><br><span class=\"line\">              System.out.<span class=\"built_in\">println</span>(response.toString());</span><br><span class=\"line\">              HttpEntity entity = response.getEntity();</span><br><span class=\"line\">              httpStr = EntityUtils.toString(entity,  <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (response != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        EntityUtils.consume(response.getEntity());</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> httpStr;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 发送 POST 请求（HTTP/HTTPS），JSON形式</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * @param url</span></span><br><span class=\"line\"><span class=\"comment\">      * @param json</span></span><br><span class=\"line\"><span class=\"comment\">      *            json对象</span></span><br><span class=\"line\"><span class=\"comment\">      * @return</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> doPost(<span class=\"keyword\">String</span> url,<span class=\"keyword\">Object</span> obj) &#123;</span><br><span class=\"line\">          CloseableHttpClient httpClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">String</span> httpStr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          HttpPost httpPost = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          CloseableHttpResponse response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(url.startsWith(<span class=\"string\">\"https:\"</span>))&#123;</span><br><span class=\"line\">              httpClient = HttpClients.custom()</span><br><span class=\"line\">                        .setSSLSocketFactory(createSSLConnSocketFactory())</span><br><span class=\"line\">                        .setConnectionManager(connMgr)</span><br><span class=\"line\">                        .setDefaultRequestConfig(requestConfig).build();</span><br><span class=\"line\">              httpPost = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              httpClient = HttpClients.createDefault();</span><br><span class=\"line\">              httpPost = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">String</span> json = JsonUtil.obj2json(obj);</span><br><span class=\"line\">              <span class=\"built_in\">log</span>.info(json);</span><br><span class=\"line\">              ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">              httpPost.setConfig(requestConfig);</span><br><span class=\"line\">              httpPost.setHeader(<span class=\"string\">\"Content-Type\"</span>,  <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">              httpPost.setHeader(<span class=\"string\">\"MerId\"</span>,  YunXinConstant.merId);</span><br><span class=\"line\">              httpPost.setHeader(<span class=\"string\">\"SecretKey\"</span>,  YunXinConstant.secretKey);</span><br><span class=\"line\">               httpPost.setHeader(<span class=\"string\">\"SignedMsg\"</span>,getSignMsg(mapper.writeValueAsString(obj)));</span><br><span class=\"line\">              StringEntity stringEntity = <span class=\"keyword\">new</span>  StringEntity(json,<span class=\"string\">\"UTF-8\"</span>);<span class=\"comment\">// 解决中文乱码问题</span></span><br><span class=\"line\">              stringEntity.setContentEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">               stringEntity.setContentType(<span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">              httpPost.setEntity(stringEntity);</span><br><span class=\"line\">              response = httpClient.execute(httpPost);</span><br><span class=\"line\">              HttpEntity entity = response.getEntity();</span><br><span class=\"line\">              httpStr = EntityUtils.toString(entity,  <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (response != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        EntityUtils.consume(response.getEntity());</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> httpStr;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getSignMsg(<span class=\"keyword\">String</span> msg)&#123;</span><br><span class=\"line\">          RsaSignUtils utl = <span class=\"keyword\">new</span>  RsaSignUtils(YunXinConstant.privateKeyPath,YunXinConstant.privateCertPassword);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> utl.generate(msg);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 创建SSL安全连接</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * @return</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SSLConnectionSocketFactory  createSSLConnSocketFactory() &#123;</span><br><span class=\"line\">          SSLConnectionSocketFactory sslsf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              SSLContext sslContext = <span class=\"keyword\">new</span>  SSLContextBuilder().loadTrustMaterial(</span><br><span class=\"line\">                        <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustStrategy() &#123;</span><br><span class=\"line\">                             <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span>  isTrusted(X509Certificate[] chain,</span><br><span class=\"line\">                                      <span class=\"keyword\">String</span> authType)  <span class=\"keyword\">throws</span> CertificateException &#123;</span><br><span class=\"line\">                                  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                        &#125;).build();</span><br><span class=\"line\">              sslsf = <span class=\"keyword\">new</span>  SSLConnectionSocketFactory(sslContext,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> HostnameVerifier() &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> verify(<span class=\"keyword\">String</span> hostname,</span><br><span class=\"line\">                             SSLSession session) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// TODO Auto-generated method  stub</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (GeneralSecurityException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> sslsf;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>HttpUtil工具类使用HttpClients</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.GeneralSecurityException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.CertificateException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.X509Certificate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.HostnameVerifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.IOUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.NameValuePair;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.config.RequestConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span>  org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span>  org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.utils.HttpClientUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span>  org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.conn.ssl.TrustStrategy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.entity.StringEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span>  org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.ssl.SSLContextBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.yeahka.loan.yunxin.constant.YunXinConstant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.yeahka.util.JsonUtil;</span><br><span class=\"line\"><span class=\"keyword\">public</span> class YunXinHttpUtil &#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Log <span class=\"built_in\">log</span> =  LogFactory.getLog(YunXinHttpUtil.class);</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> PoolingHttpClientConnectionManager  connMgr;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RequestConfig requestConfig;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> MAX_TIMEOUT = <span class=\"number\">30000</span>;</span><br><span class=\"line\">     <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 设置连接池</span></span><br><span class=\"line\">          connMgr = <span class=\"keyword\">new</span>  PoolingHttpClientConnectionManager();</span><br><span class=\"line\">          <span class=\"comment\">// 设置连接池大小</span></span><br><span class=\"line\">          connMgr.setMaxTotal(<span class=\"number\">100</span>);</span><br><span class=\"line\">          connMgr.setDefaultMaxPerRoute(connMgr.getMaxTotal());</span><br><span class=\"line\">          RequestConfig.Builder configBuilder =  RequestConfig.custom();</span><br><span class=\"line\">          <span class=\"comment\">// 设置连接超时</span></span><br><span class=\"line\">          configBuilder.setConnectTimeout(MAX_TIMEOUT);</span><br><span class=\"line\">          <span class=\"comment\">// 设置读取超时</span></span><br><span class=\"line\">          configBuilder.setSocketTimeout(MAX_TIMEOUT);</span><br><span class=\"line\">          <span class=\"comment\">// 设置从连接池获取连接实例的超时</span></span><br><span class=\"line\">          configBuilder.setConnectionRequestTimeout(MAX_TIMEOUT);</span><br><span class=\"line\">          <span class=\"comment\">// 在提交请求之前 测试连接是否可用</span></span><br><span class=\"line\">          <span class=\"comment\">//  configBuilder.setValidateAfterInactivity(true);</span></span><br><span class=\"line\">          requestConfig = configBuilder.build();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 发送 GET 请求（HTTP/HTTPS），K-V形式</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * @param url</span></span><br><span class=\"line\"><span class=\"comment\">      * @param params</span></span><br><span class=\"line\"><span class=\"comment\">      * @return</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> doGet(<span class=\"keyword\">String</span> url, Map&lt;<span class=\"keyword\">String</span>,  <span class=\"keyword\">Object</span>&gt; params) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">String</span> apiUrl = url;</span><br><span class=\"line\">          CloseableHttpClient httpClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(url.startsWith(<span class=\"string\">\"https:\"</span>))&#123;</span><br><span class=\"line\">              httpClient = HttpClients.custom()</span><br><span class=\"line\">                        .setSSLSocketFactory(createSSLConnSocketFactory())</span><br><span class=\"line\">                        .setConnectionManager(connMgr)</span><br><span class=\"line\">                        .setDefaultRequestConfig(requestConfig).build();</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              httpClient = HttpClients.createDefault();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          StringBuffer param = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">String</span> <span class=\"built_in\">key</span> : params.keySet()) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                   param.<span class=\"built_in\">append</span>(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">              <span class=\"keyword\">else</span></span><br><span class=\"line\">                   param.<span class=\"built_in\">append</span>(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">               param.<span class=\"built_in\">append</span>(<span class=\"built_in\">key</span>).<span class=\"built_in\">append</span>(<span class=\"string\">\"=\"</span>).<span class=\"built_in\">append</span>(params.<span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>));</span><br><span class=\"line\">              i++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          apiUrl += param;</span><br><span class=\"line\">          <span class=\"keyword\">String</span> result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          </span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              HttpGet httpPost = <span class=\"keyword\">new</span> HttpGet(apiUrl);</span><br><span class=\"line\">              HttpResponse response =  httpClient.execute(httpPost);</span><br><span class=\"line\">              <span class=\"built_in\">int</span> statusCode =  response.getStatusLine().getStatusCode();</span><br><span class=\"line\">              System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"执行状态码 : \"</span> +  statusCode);</span><br><span class=\"line\">              HttpEntity entity = response.getEntity();</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (entity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   InputStream instream =  entity.getContent();</span><br><span class=\"line\">                   result = IOUtils.toString(instream,  <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (httpClient != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   HttpClientUtils.closeQuietly(httpClient);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"built_in\">log</span>.info(<span class=\"string\">\"request to : &#123;\"</span>+apiUrl+<span class=\"string\">\"&#125; , param :  &#123;\"</span>+param.toString()+<span class=\"string\">\"&#125; , result : &#123;\"</span>+result+<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 发送 POST 请求（HTTP/HTTPS），K-V形式</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * @param url</span></span><br><span class=\"line\"><span class=\"comment\">      *            API接口URL</span></span><br><span class=\"line\"><span class=\"comment\">      * @param params</span></span><br><span class=\"line\"><span class=\"comment\">      *            参数map</span></span><br><span class=\"line\"><span class=\"comment\">      * @return</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> doPost(<span class=\"keyword\">String</span> url, Map&lt;<span class=\"keyword\">String</span>,  <span class=\"keyword\">Object</span>&gt; params) &#123;</span><br><span class=\"line\">          CloseableHttpClient httpClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">String</span> httpStr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          HttpPost httpPost = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          CloseableHttpResponse response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(url.startsWith(<span class=\"string\">\"https:\"</span>))&#123;</span><br><span class=\"line\">              httpClient = HttpClients.custom()</span><br><span class=\"line\">                        .setSSLSocketFactory(createSSLConnSocketFactory())</span><br><span class=\"line\">                        .setConnectionManager(connMgr)</span><br><span class=\"line\">                        .setDefaultRequestConfig(requestConfig).build();</span><br><span class=\"line\">              httpPost = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              httpClient = HttpClients.createDefault();</span><br><span class=\"line\">              httpPost = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              httpPost.setConfig(requestConfig);</span><br><span class=\"line\">              List&lt;NameValuePair&gt; pairList = <span class=\"keyword\">new</span>  ArrayList&lt;NameValuePair&gt;();</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (Map.Entry&lt;<span class=\"keyword\">String</span>, <span class=\"keyword\">Object</span>&gt; entry :  params.entrySet()) &#123;</span><br><span class=\"line\">                   NameValuePair pair = <span class=\"keyword\">new</span>  BasicNameValuePair(entry.getKey(),</span><br><span class=\"line\">                             entry.getValue().toString());</span><br><span class=\"line\">                   pairList.<span class=\"built_in\">add</span>(pair);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              httpPost.setEntity(<span class=\"keyword\">new</span>  UrlEncodedFormEntity(pairList, Charset</span><br><span class=\"line\">                        .forName(<span class=\"string\">\"UTF-8\"</span>)));</span><br><span class=\"line\">              response = httpClient.execute(httpPost);</span><br><span class=\"line\">              System.out.<span class=\"built_in\">println</span>(response.toString());</span><br><span class=\"line\">              HttpEntity entity = response.getEntity();</span><br><span class=\"line\">              httpStr = EntityUtils.toString(entity,  <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (response != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        EntityUtils.consume(response.getEntity());</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> httpStr;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 发送 POST 请求（HTTP/HTTPS），JSON形式</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * @param url</span></span><br><span class=\"line\"><span class=\"comment\">      * @param json</span></span><br><span class=\"line\"><span class=\"comment\">      *            json对象</span></span><br><span class=\"line\"><span class=\"comment\">      * @return</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> doPost(<span class=\"keyword\">String</span> url,<span class=\"keyword\">Object</span> obj) &#123;</span><br><span class=\"line\">          CloseableHttpClient httpClient = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">String</span> httpStr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          HttpPost httpPost = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          CloseableHttpResponse response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(url.startsWith(<span class=\"string\">\"https:\"</span>))&#123;</span><br><span class=\"line\">              httpClient = HttpClients.custom()</span><br><span class=\"line\">                        .setSSLSocketFactory(createSSLConnSocketFactory())</span><br><span class=\"line\">                        .setConnectionManager(connMgr)</span><br><span class=\"line\">                        .setDefaultRequestConfig(requestConfig).build();</span><br><span class=\"line\">              httpPost = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              httpClient = HttpClients.createDefault();</span><br><span class=\"line\">              httpPost = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">String</span> json = JsonUtil.obj2json(obj);</span><br><span class=\"line\">              <span class=\"built_in\">log</span>.info(json);</span><br><span class=\"line\">              ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">              httpPost.setConfig(requestConfig);</span><br><span class=\"line\">              httpPost.setHeader(<span class=\"string\">\"Content-Type\"</span>,  <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">              httpPost.setHeader(<span class=\"string\">\"MerId\"</span>,  YunXinConstant.merId);</span><br><span class=\"line\">              httpPost.setHeader(<span class=\"string\">\"SecretKey\"</span>,  YunXinConstant.secretKey);</span><br><span class=\"line\">               httpPost.setHeader(<span class=\"string\">\"SignedMsg\"</span>,getSignMsg(mapper.writeValueAsString(obj)));</span><br><span class=\"line\">              StringEntity stringEntity = <span class=\"keyword\">new</span>  StringEntity(json,<span class=\"string\">\"UTF-8\"</span>);<span class=\"comment\">// 解决中文乱码问题</span></span><br><span class=\"line\">              stringEntity.setContentEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">               stringEntity.setContentType(<span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">              httpPost.setEntity(stringEntity);</span><br><span class=\"line\">              response = httpClient.execute(httpPost);</span><br><span class=\"line\">              HttpEntity entity = response.getEntity();</span><br><span class=\"line\">              httpStr = EntityUtils.toString(entity,  <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (response != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        EntityUtils.consume(response.getEntity());</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> httpStr;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getSignMsg(<span class=\"keyword\">String</span> msg)&#123;</span><br><span class=\"line\">          RsaSignUtils utl = <span class=\"keyword\">new</span>  RsaSignUtils(YunXinConstant.privateKeyPath,YunXinConstant.privateCertPassword);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> utl.generate(msg);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 创建SSL安全连接</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * @return</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SSLConnectionSocketFactory  createSSLConnSocketFactory() &#123;</span><br><span class=\"line\">          SSLConnectionSocketFactory sslsf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              SSLContext sslContext = <span class=\"keyword\">new</span>  SSLContextBuilder().loadTrustMaterial(</span><br><span class=\"line\">                        <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustStrategy() &#123;</span><br><span class=\"line\">                             <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span>  isTrusted(X509Certificate[] chain,</span><br><span class=\"line\">                                      <span class=\"keyword\">String</span> authType)  <span class=\"keyword\">throws</span> CertificateException &#123;</span><br><span class=\"line\">                                  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                        &#125;).build();</span><br><span class=\"line\">              sslsf = <span class=\"keyword\">new</span>  SSLConnectionSocketFactory(sslContext,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> HostnameVerifier() &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> verify(<span class=\"keyword\">String</span> hostname,</span><br><span class=\"line\">                             SSLSession session) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// TODO Auto-generated method  stub</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (GeneralSecurityException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> sslsf;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjig1il3f000aj4vlkxpfpv3i","category_id":"cjig1il350006j4vlw11wm6zk","_id":"cjig1il3p000fj4vlhq2bp4y9"},{"post_id":"cjig1il2v0002j4vleeio5ckm","category_id":"cjig1il350006j4vlw11wm6zk","_id":"cjig1il3u000ij4vl1t5h0fqu"},{"post_id":"cjig1il300004j4vlcfw0qsbh","category_id":"cjig1il3k000cj4vloiuza5if","_id":"cjig1il44000lj4vlj87l06z4"},{"post_id":"cjig1il3b0008j4vlaxwi3pbk","category_id":"cjig1il350006j4vlw11wm6zk","_id":"cjig1il47000oj4vlagy2ueii"}],"PostTag":[{"post_id":"cjig1il2v0002j4vleeio5ckm","tag_id":"cjig1il390007j4vl7hs1lqt8","_id":"cjig1il3w000jj4vlj0oqtqsi"},{"post_id":"cjig1il2v0002j4vleeio5ckm","tag_id":"cjig1il3m000dj4vl2syem616","_id":"cjig1il42000kj4vlqeyh9hpi"},{"post_id":"cjig1il300004j4vlcfw0qsbh","tag_id":"cjig1il3r000hj4vltfnaonco","_id":"cjig1il46000nj4vlsfh6hzs1"},{"post_id":"cjig1il3b0008j4vlaxwi3pbk","tag_id":"cjig1il45000mj4vly4d9l98u","_id":"cjig1il4a000rj4vl1v0okk3p"},{"post_id":"cjig1il3b0008j4vlaxwi3pbk","tag_id":"cjig1il3m000dj4vl2syem616","_id":"cjig1il4b000sj4vl2fk1dz0h"},{"post_id":"cjig1il3f000aj4vlkxpfpv3i","tag_id":"cjig1il49000qj4vl6rp56lxq","_id":"cjig1il4d000uj4vlydmmpk4g"},{"post_id":"cjig1il3f000aj4vlkxpfpv3i","tag_id":"cjig1il3m000dj4vl2syem616","_id":"cjig1il4e000vj4vlnkdoxjkg"}],"Tag":[{"name":"jsonUtil","_id":"cjig1il390007j4vl7hs1lqt8"},{"name":"工具类","_id":"cjig1il3m000dj4vl2syem616"},{"name":"常见异常","_id":"cjig1il3r000hj4vltfnaonco"},{"name":"签名","_id":"cjig1il45000mj4vly4d9l98u"},{"name":"HttpUtil","_id":"cjig1il49000qj4vl6rp56lxq"}]}}